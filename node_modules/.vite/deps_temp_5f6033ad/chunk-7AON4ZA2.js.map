{
  "version": 3,
  "sources": ["../../../../../packages/common/http/src/backend.ts", "../../../../../packages/common/http/src/headers.ts", "../../../../../packages/common/http/src/params.ts", "../../../../../packages/common/http/src/context.ts", "../../../../../packages/common/http/src/request.ts", "../../../../../packages/common/http/src/response.ts", "../../../../../packages/common/http/src/client.ts", "../../../../../packages/common/http/src/interceptor.ts", "../../../../../packages/common/http/src/jsonp.ts", "../../../../../packages/common/http/src/xhr.ts", "../../../../../packages/common/http/src/xsrf.ts", "../../../../../packages/common/http/src/provider.ts", "../../../../../packages/common/http/src/module.ts", "../../../../../packages/common/http/src/transfer_cache.ts", "../../../../../packages/common/http/index.ts", "../../../../../packages/common/http/http.ts", "../../../../../packages/platform-browser/src/browser/generic_browser_adapter.ts", "../../../../../packages/platform-browser/src/browser/browser_adapter.ts", "../../../../../packages/platform-browser/src/browser/testability.ts", "../../../../../packages/platform-browser/src/browser/xhr.ts", "../../../../../packages/platform-browser/src/dom/events/event_manager.ts", "../../../../../packages/platform-browser/src/dom/shared_styles_host.ts", "../../../../../packages/platform-browser/src/dom/dom_renderer.ts", "../../../../../packages/platform-browser/src/dom/events/dom_events.ts", "../../../../../packages/platform-browser/src/dom/events/key_events.ts", "../../../../../packages/platform-browser/src/browser.ts", "../../../../../packages/platform-browser/src/browser/meta.ts", "../../../../../packages/platform-browser/src/browser/title.ts", "../../../../../packages/platform-browser/src/dom/util.ts", "../../../../../packages/platform-browser/src/browser/tools/browser.ts", "../../../../../packages/platform-browser/src/browser/tools/common_tools.ts", "../../../../../packages/platform-browser/src/browser/tools/tools.ts", "../../../../../packages/platform-browser/src/dom/debug/by.ts", "../../../../../packages/platform-browser/src/dom/events/hammer_gestures.ts", "../../../../../packages/platform-browser/src/security/dom_sanitization_service.ts", "../../../../../packages/platform-browser/src/hydration.ts", "../../../../../packages/platform-browser/src/version.ts", "../../../../../packages/platform-browser/src/platform-browser.ts", "../../../../../packages/platform-browser/public_api.ts", "../../../../../packages/platform-browser/index.ts", "../../../../../packages/platform-browser/platform-browser.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\n\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nexport abstract class HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nexport abstract class HttpBackend implements HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ninterface Update {\n  name: string;\n  value?: string|string[];\n  op: 'a'|'s'|'d';\n}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nexport class HttpHeaders {\n  /**\n   * Internal map of lowercase header names to values.\n   */\n  // TODO(issue/24571): remove '!'.\n  private headers!: Map<string, string[]>;\n\n\n  /**\n   * Internal map of lowercased header names to the normalized\n   * form of the name (the form seen first).\n   */\n  private normalizedNames: Map<string, string> = new Map();\n\n  /**\n   * Complete the lazy initialization of this object (needed before reading).\n   */\n  private lazyInit!: HttpHeaders|Function|null;\n\n  /**\n   * Queued updates to be materialized the next initialization.\n   */\n  private lazyUpdate: Update[]|null = null;\n\n  /**  Constructs a new HTTP header object with the given values.*/\n\n  constructor(headers?: string|{[name: string]: string | number | (string | number)[]}) {\n    if (!headers) {\n      this.headers = new Map<string, string[]>();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        headers.split('\\n').forEach(line => {\n          const index = line.indexOf(':');\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const key = name.toLowerCase();\n            const value = line.slice(index + 1).trim();\n            this.maybeSetNormalizedName(name, key);\n            if (this.headers.has(key)) {\n              this.headers.get(key)!.push(value);\n            } else {\n              this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else {\n      this.lazyInit = () => {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          assertValidHeaders(headers);\n        }\n        this.headers = new Map<string, string[]>();\n        Object.entries(headers).forEach(([name, values]) => {\n          let headerValues: string[];\n\n          if (typeof values === 'string') {\n            headerValues = [values];\n          } else if (typeof values === 'number') {\n            headerValues = [values.toString()];\n          } else {\n            headerValues = values.map((value) => value.toString());\n          }\n\n          if (headerValues.length > 0) {\n            const key = name.toLowerCase();\n            this.headers.set(key, headerValues);\n            this.maybeSetNormalizedName(name, key);\n          }\n        });\n      };\n    }\n  }\n\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n  has(name: string): boolean {\n    this.init();\n\n    return this.headers.has(name.toLowerCase());\n  }\n\n  /**\n   * Retrieves the first value of a given header.\n   *\n   * @param name The header name.\n   *\n   * @returns The value string if the header exists, null otherwise\n   */\n  get(name: string): string|null {\n    this.init();\n\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n\n  /**\n   * Retrieves the names of the headers.\n   *\n   * @returns A list of header names.\n   */\n  keys(): string[] {\n    this.init();\n\n    return Array.from(this.normalizedNames.values());\n  }\n\n  /**\n   * Retrieves a list of values for a given header.\n   *\n   * @param name The header name from which to retrieve values.\n   *\n   * @returns A string of values if the header exists, null otherwise.\n   */\n  getAll(name: string): string[]|null {\n    this.init();\n\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n\n  /**\n   * Appends a new value to the existing set of values for a header\n   * and returns them in a clone of the original instance.\n   *\n   * @param name The header name for which to append the values.\n   * @param value The value to append.\n   *\n   * @returns A clone of the HTTP headers object with the value appended to the given header.\n   */\n\n  append(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'a'});\n  }\n  /**\n   * Sets or modifies a value for a given header in a clone of the original instance.\n   * If the header already exists, its value is replaced with the given value\n   * in the returned object.\n   *\n   * @param name The header name.\n   * @param value The value or values to set or override for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the newly set header value.\n   */\n  set(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 's'});\n  }\n  /**\n   * Deletes values for a given header in a clone of the original instance.\n   *\n   * @param name The header name.\n   * @param value The value or values to delete for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the given value deleted.\n   */\n  delete(name: string, value?: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'd'});\n  }\n\n  private maybeSetNormalizedName(name: string, lcName: string): void {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n\n  private init(): void {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n      this.lazyInit = null;\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach(update => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n\n  private copyFrom(other: HttpHeaders) {\n    other.init();\n    Array.from(other.headers.keys()).forEach(key => {\n      this.headers.set(key, other.headers.get(key)!);\n      this.normalizedNames.set(key, other.normalizedNames.get(key)!);\n    });\n  }\n\n  private clone(update: Update): HttpHeaders {\n    const clone = new HttpHeaders();\n    clone.lazyInit =\n        (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n\n  private applyUpdate(update: Update): void {\n    const key = update.name.toLowerCase();\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value!;\n        if (typeof value === 'string') {\n          value = [value];\n        }\n        if (value.length === 0) {\n          return;\n        }\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n      case 'd':\n        const toDelete = update.value as string | undefined;\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n          if (!existing) {\n            return;\n          }\n          existing = existing.filter(value => toDelete.indexOf(value) === -1);\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n        break;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  forEach(fn: (name: string, values: string[]) => void) {\n    this.init();\n    Array.from(this.normalizedNames.keys())\n        .forEach(key => fn(this.normalizedNames.get(key)!, this.headers.get(key)!));\n  }\n}\n\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings, numbers or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(headers: Record<string, unknown>):\n    asserts headers is Record<string, string|string[]|number|number[]> {\n  for (const [key, value] of Object.entries(headers)) {\n    if (!(typeof value === 'string' || typeof value === 'number') && !Array.isArray(value)) {\n      throw new Error(\n          `Unexpected value of the \\`${key}\\` header provided. ` +\n          `Expecting either a string, a number or an array, but got: \\`${value}\\`.`);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * @publicApi\n **/\nexport interface HttpParameterCodec {\n  encodeKey(key: string): string;\n  encodeValue(value: string): string;\n\n  decodeKey(key: string): string;\n  decodeValue(value: string): string;\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nexport class HttpUrlEncodingCodec implements HttpParameterCodec {\n  /**\n   * Encodes a key name for a URL parameter or query-string.\n   * @param key The key name.\n   * @returns The encoded key name.\n   */\n  encodeKey(key: string): string {\n    return standardEncoding(key);\n  }\n\n  /**\n   * Encodes the value of a URL parameter or query-string.\n   * @param value The value.\n   * @returns The encoded value.\n   */\n  encodeValue(value: string): string {\n    return standardEncoding(value);\n  }\n\n  /**\n   * Decodes an encoded URL parameter or query-string key.\n   * @param key The encoded key name.\n   * @returns The decoded key name.\n   */\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  /**\n   * Decodes an encoded URL parameter or query-string value.\n   * @param value The encoded value.\n   * @returns The decoded value.\n   */\n  decodeValue(value: string) {\n    return decodeURIComponent(value);\n  }\n}\n\n\nfunction paramParser(rawParams: string, codec: HttpParameterCodec): Map<string, string[]> {\n  const map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    const params: string[] = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach((param: string) => {\n      const eqIdx = param.indexOf('=');\n      const [key, val]: string[] = eqIdx == -1 ?\n          [codec.decodeKey(param), ''] :\n          [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS: {[x: string]: string} = {\n  '40': '@',\n  '3A': ':',\n  '24': '$',\n  '2C': ',',\n  '3B': ';',\n  '3D': '=',\n  '3F': '?',\n  '2F': '/',\n};\n\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v).replace(\n      STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\n\nfunction valueToString(value: string|number|boolean): string {\n  return `${value}`;\n}\n\ninterface Update {\n  param: string;\n  value?: string|number|boolean;\n  op: 'a'|'d'|'s';\n}\n\n/**\n * Options used to construct an `HttpParams` instance.\n *\n * @publicApi\n */\nexport interface HttpParamsOptions {\n  /**\n   * String representation of the HTTP parameters in URL-query-string format.\n   * Mutually exclusive with `fromObject`.\n   */\n  fromString?: string;\n\n  /** Object map of the HTTP parameters. Mutually exclusive with `fromString`. */\n  fromObject?: {[param: string]: string|number|boolean|ReadonlyArray<string|number|boolean>};\n\n  /** Encoding codec used to parse and serialize the parameters. */\n  encoder?: HttpParameterCodec;\n}\n\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nexport class HttpParams {\n  private map: Map<string, string[]>|null;\n  private encoder: HttpParameterCodec;\n  private updates: Update[]|null = null;\n  private cloneFrom: HttpParams|null = null;\n\n  constructor(options: HttpParamsOptions = {} as HttpParamsOptions) {\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(`Cannot specify both fromString and fromObject.`);\n      }\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map<string, string[]>();\n      Object.keys(options.fromObject).forEach(key => {\n        const value = (options.fromObject as any)[key];\n        // convert the values to strings\n        const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n        this.map!.set(key, values);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n  has(param: string): boolean {\n    this.init();\n    return this.map!.has(param);\n  }\n\n  /**\n   * Retrieves the first value for a parameter.\n   * @param param The parameter name.\n   * @returns The first value of the given parameter,\n   * or `null` if the parameter is not present.\n   */\n  get(param: string): string|null {\n    this.init();\n    const res = this.map!.get(param);\n    return !!res ? res[0] : null;\n  }\n\n  /**\n   * Retrieves all values for a  parameter.\n   * @param param The parameter name.\n   * @returns All values in a string array,\n   * or `null` if the parameter not present.\n   */\n  getAll(param: string): string[]|null {\n    this.init();\n    return this.map!.get(param) || null;\n  }\n\n  /**\n   * Retrieves all the parameters for this body.\n   * @returns The parameter names in a string array.\n   */\n  keys(): string[] {\n    this.init();\n    return Array.from(this.map!.keys());\n  }\n\n  /**\n   * Appends a new value to existing values for a parameter.\n   * @param param The parameter name.\n   * @param value The new value to add.\n   * @return A new body with the appended value.\n   */\n  append(param: string, value: string|number|boolean): HttpParams {\n    return this.clone({param, value, op: 'a'});\n  }\n\n  /**\n   * Constructs a new body with appended values for the given parameter name.\n   * @param params parameters and values\n   * @return A new body with the new value.\n   */\n  appendAll(params: {[param: string]: string|number|boolean|ReadonlyArray<string|number|boolean>}):\n      HttpParams {\n    const updates: Update[] = [];\n    Object.keys(params).forEach(param => {\n      const value = params[param];\n      if (Array.isArray(value)) {\n        value.forEach(_value => {\n          updates.push({param, value: _value, op: 'a'});\n        });\n      } else {\n        updates.push({param, value: value as (string | number | boolean), op: 'a'});\n      }\n    });\n    return this.clone(updates);\n  }\n\n  /**\n   * Replaces the value for a parameter.\n   * @param param The parameter name.\n   * @param value The new value.\n   * @return A new body with the new value.\n   */\n  set(param: string, value: string|number|boolean): HttpParams {\n    return this.clone({param, value, op: 's'});\n  }\n\n  /**\n   * Removes a given value or all values from a parameter.\n   * @param param The parameter name.\n   * @param value The value to remove, if provided.\n   * @return A new body with the given value removed, or with all values\n   * removed if no value is specified.\n   */\n  delete(param: string, value?: string|number|boolean): HttpParams {\n    return this.clone({param, value, op: 'd'});\n  }\n\n  /**\n   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n   * separated by `&`s.\n   */\n  toString(): string {\n    this.init();\n    return this.keys()\n        .map(key => {\n          const eKey = this.encoder.encodeKey(key);\n          // `a: ['1']` produces `'a=1'`\n          // `b: []` produces `''`\n          // `c: ['1', '2']` produces `'c=1&c=2'`\n          return this.map!.get(key)!.map(value => eKey + '=' + this.encoder.encodeValue(value))\n              .join('&');\n        })\n        // filter out empty values because `b: []` produces `''`\n        // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n        .filter(param => param !== '')\n        .join('&');\n  }\n\n  private clone(update: Update|Update[]): HttpParams {\n    const clone = new HttpParams({encoder: this.encoder} as HttpParamsOptions);\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat(update);\n    return clone;\n  }\n\n  private init() {\n    if (this.map === null) {\n      this.map = new Map<string, string[]>();\n    }\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach(key => this.map!.set(key, this.cloneFrom!.map!.get(key)!));\n      this.updates!.forEach(update => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const base = (update.op === 'a' ? this.map!.get(update.param) : undefined) || [];\n            base.push(valueToString(update.value!));\n            this.map!.set(update.param, base);\n            break;\n          case 'd':\n            if (update.value !== undefined) {\n              let base = this.map!.get(update.param) || [];\n              const idx = base.indexOf(valueToString(update.value));\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n              if (base.length > 0) {\n                this.map!.set(update.param, base);\n              } else {\n                this.map!.delete(update.param);\n              }\n            } else {\n              this.map!.delete(update.param);\n              break;\n            }\n        }\n      });\n      this.cloneFrom = this.updates = null;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nexport class HttpContextToken<T> {\n  constructor(public readonly defaultValue: () => T) {}\n}\n\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nexport class HttpContext {\n  private readonly map = new Map<HttpContextToken<unknown>, unknown>();\n\n  /**\n   * Store a value in the context. If a value is already present it will be overwritten.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   * @param value The value to store.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  set<T>(token: HttpContextToken<T>, value: T): HttpContext {\n    this.map.set(token, value);\n    return this;\n  }\n\n  /**\n   * Retrieve the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns The stored value or default if one is defined.\n   */\n  get<T>(token: HttpContextToken<T>): T {\n    if (!this.map.has(token)) {\n      this.map.set(token, token.defaultValue());\n    }\n    return this.map.get(token) as T;\n  }\n\n  /**\n   * Delete the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  delete(token: HttpContextToken<unknown>): HttpContext {\n    this.map.delete(token);\n    return this;\n  }\n\n  /**\n   * Checks for existence of a given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns True if the token exists, false otherwise.\n   */\n  has(token: HttpContextToken<unknown>): boolean {\n    return this.map.has(token);\n  }\n\n  /**\n   * @returns a list of tokens currently stored in the context.\n   */\n  keys(): IterableIterator<HttpContextToken<unknown>> {\n    return this.map.keys();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpContext} from './context';\nimport {HttpHeaders} from './headers';\nimport {HttpParams} from './params';\n\n\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n */\ninterface HttpRequestInit {\n  headers?: HttpHeaders;\n  context?: HttpContext;\n  reportProgress?: boolean;\n  params?: HttpParams;\n  responseType?: 'arraybuffer'|'blob'|'json'|'text';\n  withCredentials?: boolean;\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method: string): boolean {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n    default:\n      return true;\n  }\n}\n\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value: any): value is ArrayBuffer {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value: any): value is Blob {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value: any): value is FormData {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value: any): value is URLSearchParams {\n  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nexport class HttpRequest<T> {\n  /**\n   * The request body, or `null` if one isn't set.\n   *\n   * Bodies are not enforced to be immutable, as they can include a reference to any\n   * user-defined data type. However, interceptors should take care to preserve\n   * idempotence by treating them as such.\n   */\n  readonly body: T|null = null;\n\n  /**\n   * Outgoing headers for this request.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly headers!: HttpHeaders;\n\n  /**\n   * Shared and mutable context that can be used by interceptors\n   */\n  readonly context!: HttpContext;\n\n  /**\n   * Whether this request should be made in a way that exposes progress events.\n   *\n   * Progress events are expensive (change detection runs on each event) and so\n   * they should only be requested if the consumer intends to monitor them.\n   */\n  readonly reportProgress: boolean = false;\n\n  /**\n   * Whether this request should be sent with outgoing credentials (cookies).\n   */\n  readonly withCredentials: boolean = false;\n\n  /**\n   * The expected response type of the server.\n   *\n   * This is used to parse the response appropriately before returning it to\n   * the requestee.\n   */\n  readonly responseType: 'arraybuffer'|'blob'|'json'|'text' = 'json';\n\n  /**\n   * The outgoing HTTP request method.\n   */\n  readonly method: string;\n\n  /**\n   * Outgoing URL parameters.\n   *\n   * To pass a string representation of HTTP parameters in the URL-query-string format,\n   * the `HttpParamsOptions`' `fromString` may be used. For example:\n   *\n   * ```\n   * new HttpParams({fromString: 'angular=awesome'})\n   * ```\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly params!: HttpParams;\n\n  /**\n   * The outgoing URL with all URL parameters set.\n   */\n  readonly urlWithParams: string;\n\n  constructor(method: 'DELETE'|'GET'|'HEAD'|'JSONP'|'OPTIONS', url: string, init?: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(method: 'POST'|'PUT'|'PATCH', url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(method: string, url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(\n      method: string, readonly url: string, third?: T|{\n        headers?: HttpHeaders,\n        context?: HttpContext,\n        reportProgress?: boolean,\n        params?: HttpParams,\n        responseType?: 'arraybuffer'|'blob'|'json'|'text',\n        withCredentials?: boolean,\n      }|null,\n      fourth?: {\n        headers?: HttpHeaders,\n        context?: HttpContext,\n        reportProgress?: boolean,\n        params?: HttpParams,\n        responseType?: 'arraybuffer'|'blob'|'json'|'text',\n        withCredentials?: boolean,\n      }) {\n    this.method = method.toUpperCase();\n    // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n    let options: HttpRequestInit|undefined;\n\n    // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = (third !== undefined) ? third as T : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third as HttpRequestInit;\n    }\n\n    // If options have been passed, interpret them.\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials;\n\n      // Override default response type of 'json' if one is provided.\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      }\n\n      // Override headers if they're provided.\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n\n      if (!!options.context) {\n        this.context = options.context;\n      }\n\n      if (!!options.params) {\n        this.params = options.params;\n      }\n    }\n\n    // If no headers have been passed in, construct a new HttpHeaders instance.\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    }\n\n    // If no context have been passed in, construct a new HttpContext instance.\n    if (!this.context) {\n      this.context = new HttpContext();\n    }\n\n    // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      const params = this.params.toString();\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        const qIdx = url.indexOf('?');\n        // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n        const sep: string = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n  serializeBody(): ArrayBuffer|Blob|FormData|string|null {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    }\n    // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n    if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n        isUrlSearchParams(this.body) || typeof this.body === 'string') {\n      return this.body;\n    }\n    // Check whether the body is an instance of HttpUrlEncodedParams.\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    }\n    // Check whether the body is an object or array, and serialize with JSON if so.\n    if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n        Array.isArray(this.body)) {\n      return JSON.stringify(this.body);\n    }\n    // Fall back on toString() for everything else.\n    return (this.body as any).toString();\n  }\n\n  /**\n   * Examine the body and attempt to infer an appropriate MIME type\n   * for it.\n   *\n   * If no such type can be inferred, this method will return `null`.\n   */\n  detectContentTypeHeader(): string|null {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    }\n    // FormData bodies rely on the browser's content type assignment.\n    if (isFormData(this.body)) {\n      return null;\n    }\n    // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    }\n    // Array buffers have unknown contents and thus no type can be inferred.\n    if (isArrayBuffer(this.body)) {\n      return null;\n    }\n    // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n    if (typeof this.body === 'string') {\n      return 'text/plain';\n    }\n    // `HttpUrlEncodedParams` has its own content-type.\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n    // Arrays, objects, boolean and numbers will be encoded as JSON.\n    if (typeof this.body === 'object' || typeof this.body === 'number' ||\n        typeof this.body === 'boolean') {\n      return 'application/json';\n    }\n    // No type could be inferred.\n    return null;\n  }\n\n  clone(): HttpRequest<T>;\n  clone(update: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: T|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string|string[]},\n    setParams?: {[param: string]: string},\n  }): HttpRequest<T>;\n  clone<V>(update: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: V|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string|string[]},\n    setParams?: {[param: string]: string},\n  }): HttpRequest<V>;\n  clone(update: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: any|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string|string[]},\n    setParams?: {[param: string]: string};\n  } = {}): HttpRequest<any> {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    const method = update.method || this.method;\n    const url = update.url || this.url;\n    const responseType = update.responseType || this.responseType;\n\n    // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n    const body = (update.body !== undefined) ? update.body : this.body;\n\n    // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n    const withCredentials =\n        (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n    const reportProgress =\n        (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n\n    // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n    let headers = update.headers || this.headers;\n    let params = update.params || this.params;\n\n    // Pass on context if needed\n    const context = update.context ?? this.context;\n\n    // Check whether the caller has asked to add headers.\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers =\n          Object.keys(update.setHeaders)\n              .reduce((headers, name) => headers.set(name, update.setHeaders![name]), headers);\n    }\n\n    // Check whether the caller has asked to set params.\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams)\n                   .reduce((params, param) => params.set(param, update.setParams![param]), params);\n    }\n\n    // Finally, construct the new HttpRequest using the pieces from above.\n    return new HttpRequest(method, url, body, {\n      params,\n      headers,\n      context,\n      reportProgress,\n      responseType,\n      withCredentials,\n    });\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpHeaders} from './headers';\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nexport enum HttpEventType {\n  /**\n   * The request was sent out over the wire.\n   */\n  Sent,\n\n  /**\n   * An upload progress event was received.\n   */\n  UploadProgress,\n\n  /**\n   * The response status code and headers were received.\n   */\n  ResponseHeader,\n\n  /**\n   * A download progress event was received.\n   */\n  DownloadProgress,\n\n  /**\n   * The full response including the body was received.\n   */\n  Response,\n\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n  User,\n}\n\n/**\n * Base interface for progress events.\n *\n * @publicApi\n */\nexport interface HttpProgressEvent {\n  /**\n   * Progress event type is either upload or download.\n   */\n  type: HttpEventType.DownloadProgress|HttpEventType.UploadProgress;\n\n  /**\n   * Number of bytes uploaded or downloaded.\n   */\n  loaded: number;\n\n  /**\n   * Total number of bytes to upload or download. Depending on the request or\n   * response, this may not be computable and thus may not be present.\n   */\n  total?: number;\n}\n\n/**\n * A download progress event.\n *\n * @publicApi\n */\nexport interface HttpDownloadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.DownloadProgress;\n\n  /**\n   * The partial response body as downloaded so far.\n   *\n   * Only present if the responseType was `text`.\n   */\n  partialText?: string;\n}\n\n/**\n * An upload progress event.\n *\n * @publicApi\n */\nexport interface HttpUploadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.UploadProgress;\n}\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * @publicApi\n */\nexport interface HttpSentEvent {\n  type: HttpEventType.Sent;\n}\n\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * @publicApi\n */\nexport interface HttpUserEvent<T> {\n  type: HttpEventType.User;\n}\n\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n */\nexport interface HttpJsonParseError {\n  error: Error;\n  text: string;\n}\n\n/**\n * Union type for all possible events on the response stream.\n *\n * Typed according to the expected type of the response.\n *\n * @publicApi\n */\nexport type HttpEvent<T> =\n    HttpSentEvent|HttpHeaderResponse|HttpResponse<T>|HttpProgressEvent|HttpUserEvent<T>;\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nexport abstract class HttpResponseBase {\n  /**\n   * All response headers.\n   */\n  readonly headers: HttpHeaders;\n\n  /**\n   * Response status code.\n   */\n  readonly status: number;\n\n  /**\n   * Textual description of response status code, defaults to OK.\n   *\n   * Do not depend on this.\n   */\n  readonly statusText: string;\n\n  /**\n   * URL of the resource retrieved, or null if not available.\n   */\n  readonly url: string|null;\n\n  /**\n   * Whether the status code falls in the 2xx range.\n   */\n  readonly ok: boolean;\n\n  /**\n   * Type of the response, narrowed to either the full response or the header.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly type!: HttpEventType.Response|HttpEventType.ResponseHeader;\n\n  /**\n   * Super-constructor for all responses.\n   *\n   * The single parameter accepted is an initialization hash. Any properties\n   * of the response passed there will override the default values.\n   */\n  constructor(\n      init: {\n        headers?: HttpHeaders,\n        status?: number,\n        statusText?: string,\n        url?: string,\n      },\n      defaultStatus: number = HttpStatusCode.Ok, defaultStatusText: string = 'OK') {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null;\n\n    // Cache the ok value to avoid defining a getter.\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n}\n\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nexport class HttpHeaderResponse extends HttpResponseBase {\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  constructor(init: {\n    headers?: HttpHeaders,\n    status?: number,\n    statusText?: string,\n    url?: string,\n  } = {}) {\n    super(init);\n  }\n\n  override readonly type: HttpEventType.ResponseHeader = HttpEventType.ResponseHeader;\n\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;} = {}):\n      HttpHeaderResponse {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nexport class HttpResponse<T> extends HttpResponseBase {\n  /**\n   * The response body, or `null` if one was not returned.\n   */\n  readonly body: T|null;\n\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  constructor(init: {\n    body?: T|null,\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  } = {}) {\n    super(init);\n    this.body = init.body !== undefined ? init.body : null;\n  }\n\n  override readonly type: HttpEventType.Response = HttpEventType.Response;\n\n  clone(): HttpResponse<T>;\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;}):\n      HttpResponse<T>;\n  clone<V>(update: {\n    body?: V|null,\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }): HttpResponse<V>;\n  clone(update: {\n    body?: any|null;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  } = {}): HttpResponse<any> {\n    return new HttpResponse<any>({\n      body: (update.body !== undefined) ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: (update.status !== undefined) ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nexport class HttpErrorResponse extends HttpResponseBase implements Error {\n  readonly name = 'HttpErrorResponse';\n  readonly message: string;\n  readonly error: any|null;\n\n  /**\n   * Errors are never okay, even when the status code is in the 2xx success range.\n   */\n  override readonly ok = false;\n\n  constructor(init: {\n    error?: any;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${\n          init.statusText}`;\n    }\n    this.error = init.error || null;\n  }\n}\n\n/**\n * Http status codes.\n * As per https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n * @publicApi\n */\nexport const enum HttpStatusCode {\n  Continue = 100,\n  SwitchingProtocols = 101,\n  Processing = 102,\n  EarlyHints = 103,\n\n  Ok = 200,\n  Created = 201,\n  Accepted = 202,\n  NonAuthoritativeInformation = 203,\n  NoContent = 204,\n  ResetContent = 205,\n  PartialContent = 206,\n  MultiStatus = 207,\n  AlreadyReported = 208,\n  ImUsed = 226,\n\n  MultipleChoices = 300,\n  MovedPermanently = 301,\n  Found = 302,\n  SeeOther = 303,\n  NotModified = 304,\n  UseProxy = 305,\n  Unused = 306,\n  TemporaryRedirect = 307,\n  PermanentRedirect = 308,\n\n  BadRequest = 400,\n  Unauthorized = 401,\n  PaymentRequired = 402,\n  Forbidden = 403,\n  NotFound = 404,\n  MethodNotAllowed = 405,\n  NotAcceptable = 406,\n  ProxyAuthenticationRequired = 407,\n  RequestTimeout = 408,\n  Conflict = 409,\n  Gone = 410,\n  LengthRequired = 411,\n  PreconditionFailed = 412,\n  PayloadTooLarge = 413,\n  UriTooLong = 414,\n  UnsupportedMediaType = 415,\n  RangeNotSatisfiable = 416,\n  ExpectationFailed = 417,\n  ImATeapot = 418,\n  MisdirectedRequest = 421,\n  UnprocessableEntity = 422,\n  Locked = 423,\n  FailedDependency = 424,\n  TooEarly = 425,\n  UpgradeRequired = 426,\n  PreconditionRequired = 428,\n  TooManyRequests = 429,\n  RequestHeaderFieldsTooLarge = 431,\n  UnavailableForLegalReasons = 451,\n\n  InternalServerError = 500,\n  NotImplemented = 501,\n  BadGateway = 502,\n  ServiceUnavailable = 503,\n  GatewayTimeout = 504,\n  HttpVersionNotSupported = 505,\n  VariantAlsoNegotiates = 506,\n  InsufficientStorage = 507,\n  LoopDetected = 508,\n  NotExtended = 510,\n  NetworkAuthenticationRequired = 511\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {concatMap, filter, map} from 'rxjs/operators';\n\nimport {HttpHandler} from './backend';\nimport {HttpContext} from './context';\nimport {HttpHeaders} from './headers';\nimport {HttpParams, HttpParamsOptions} from './params';\nimport {HttpRequest} from './request';\nimport {HttpEvent, HttpResponse} from './response';\n\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody<T>(\n    options: {\n      headers?: HttpHeaders|{[header: string]: string | string[]},\n      context?: HttpContext,\n      observe?: 'body'|'events'|'response',\n      params?: HttpParams|\n            {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n      reportProgress?: boolean,\n      responseType?: 'arraybuffer'|'blob'|'json'|'text',\n      withCredentials?: boolean,\n    },\n    body: T|null): any {\n  return {\n    body,\n    headers: options.headers,\n    context: options.context,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials,\n  };\n}\n\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/tour-of-heroes/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\n@Injectable()\nexport class HttpClient {\n  constructor(private handler: HttpHandler) {}\n\n  /**\n   * Sends an `HttpRequest` and returns a stream of `HttpEvent`s.\n   *\n   * @return An `Observable` of the response, with the response body as a stream of `HttpEvent`s.\n   */\n  request<R>(req: HttpRequest<any>): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the response in\n   * an `ArrayBuffer`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a request that interprets the body as a blob and returns\n   * the response as a blob.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an array of `HttpEvent`s for\n   * the request.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n          observe: 'events',\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a request that interprets the body as a `Blob` and returns\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text string and returns the full event\n   * stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the  request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `Object`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'events',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<any>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'events',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request which interprets the body as an `ArrayBuffer`\n   * and returns the full `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body as an `ArrayBuffer`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a request which interprets the body as a `Blob` and returns the full `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text stream and returns the full\n   * `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the HTTP response, with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`,\n   * with the response body of type `Object`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns\n   * the full `HttpResponse` with the response body in the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the full `HttpResponse`, with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<R>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * `HttpResponse` as a JavaScript object.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Object`.\n   */\n  request(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    reportProgress?: boolean,\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object\n   * with the response body of the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    reportProgress?: boolean,\n    withCredentials?: boolean,\n  }): Observable<R>;\n\n  /**\n   * Constructs a request where response type and requested observable are not known statically.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the requested response, with body of type `any`.\n   */\n  request(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    observe?: 'body'|'events'|'response',\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  }): Observable<any>;\n\n  /**\n   * Constructs an observable for a generic HTTP request that, when subscribed,\n   * fires the request through the chain of registered interceptors and on to the\n   * server.\n   *\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\n   * the call returns an observable of the raw `HttpEvent` stream.\n   *\n   * Alternatively you can pass an HTTP method as the first parameter,\n   * a URL string as the second, and an options hash containing the request body as the third.\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n   * type of returned observable.\n   *   * The `responseType` value determines how a successful response body is parsed.\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n   * object as a type parameter to the call.\n   *\n   * The `observe` value determines the return type, according to what you are interested in\n   * observing.\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n   * progress events by default.\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\n   * parameter.\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n   *\n   */\n  request(first: string|HttpRequest<any>, url?: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    let req: HttpRequest<any>;\n    // First, check whether the primary argument is an instance of `HttpRequest`.\n    if (first instanceof HttpRequest) {\n      // It is. The other arguments must be undefined (per the signatures) and can be\n      // ignored.\n      req = first;\n    } else {\n      // It's a string, so it represents a URL. Construct a request based on it,\n      // and incorporate the remaining arguments (assuming `GET` unless a method is\n      // provided.\n\n      // Figure out the headers.\n      let headers: HttpHeaders|undefined = undefined;\n      if (options.headers instanceof HttpHeaders) {\n        headers = options.headers;\n      } else {\n        headers = new HttpHeaders(options.headers);\n      }\n\n      // Sort out parameters.\n      let params: HttpParams|undefined = undefined;\n      if (!!options.params) {\n        if (options.params instanceof HttpParams) {\n          params = options.params;\n        } else {\n          params = new HttpParams({fromObject: options.params} as HttpParamsOptions);\n        }\n      }\n\n      // Construct the request.\n      req = new HttpRequest(first, url!, (options.body !== undefined ? options.body : null), {\n        headers,\n        context: options.context,\n        params,\n        reportProgress: options.reportProgress,\n        // By default, JSON is assumed to be returned for all calls.\n        responseType: options.responseType || 'json',\n        withCredentials: options.withCredentials,\n      });\n    }\n\n    // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n    const events$: Observable<HttpEvent<any>> =\n        of(req).pipe(concatMap((req: HttpRequest<any>) => this.handler.handle(req)));\n\n    // If coming via the API signature which accepts a previously constructed HttpRequest,\n    // the only option is to get the event stream. Otherwise, return the event stream if\n    // that is what was requested.\n    if (first instanceof HttpRequest || options.observe === 'events') {\n      return events$;\n    }\n\n    // The requested stream contains either the full response or the body. In either\n    // case, the first step is to filter the event stream to extract a stream of\n    // responses(s).\n    const res$: Observable<HttpResponse<any>> = <Observable<HttpResponse<any>>>events$.pipe(\n        filter((event: HttpEvent<any>) => event instanceof HttpResponse));\n\n    // Decide which stream to return.\n    switch (options.observe || 'body') {\n      case 'body':\n        // The requested stream is the body. Map the response stream to the response\n        // body. This could be done more simply, but a misbehaving interceptor might\n        // transform the response body into a different format and ignore the requested\n        // responseType. Guard against this by validating that the response is of the\n        // requested type.\n        switch (req.responseType) {\n          case 'arraybuffer':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is an ArrayBuffer.\n              if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                throw new Error('Response is not an ArrayBuffer.');\n              }\n              return res.body;\n            }));\n          case 'blob':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is a Blob.\n              if (res.body !== null && !(res.body instanceof Blob)) {\n                throw new Error('Response is not a Blob.');\n              }\n              return res.body;\n            }));\n          case 'text':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is a string.\n              if (res.body !== null && typeof res.body !== 'string') {\n                throw new Error('Response is not a string.');\n              }\n              return res.body;\n            }));\n          case 'json':\n          default:\n            // No validation needed for JSON responses, as they can be of any type.\n            return res$.pipe(map((res: HttpResponse<any>) => res.body));\n        }\n      case 'response':\n        // The response stream was requested directly, so return it.\n        return res$;\n      default:\n        // Guard against new future observe types being added.\n        throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n    }\n  }\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response body as an `ArrayBuffer`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<ArrayBuffer>;\n\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response body as a `Blob`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string and returns\n   * a string.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with response body as an `ArrayBuffer`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    body?: any|null\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with the response body as a\n   * `Blob`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response\n   * body of type string.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with response body of\n   * type `Object`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `DELETE`request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with a response\n   * body in the requested type.\n   */\n  delete<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | (string | number | boolean)[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`, with the response body as an `ArrayBuffer`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Blob`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text stream and\n   *  returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`, with the response body of type string.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `DELETE` request the interprets the body as a JavaScript object and returns\n   * the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Object`.\n   *\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of the requested type.\n   */\n  delete<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  delete(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a DELETE request that interprets the body as JSON and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with response body in the requested type.\n   */\n  delete<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `DELETE` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  } = {}): Observable<any> {\n    return this.request<any>('DELETE', url, options as any);\n  }\n\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns the\n   * response in an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob`\n   * and returns the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string\n   * and returns the response as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response\n   * body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string and returns\n   * the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with a response body in the requested type.\n   */\n  get<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text stream and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`,\n   * with the response body of type `Object`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  get<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response body as a JavaScript object.\n   */\n  get(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and returns\n   * the response body in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with a response body in the requested type.\n   */\n  get<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `GET` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('GET', url, options as any);\n  }\n\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer` and\n   * returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response, with the response body as a `Blob`.\n   */\n\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string and returns the response\n   * as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an  `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response body of type\n   * string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON\n   * and returns the full HTTP event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body of\n   * type `Object`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the full event stream.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   */\n  head<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a blob.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as text stream\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body of the requested type.\n   */\n  head<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  head(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body of the given type.\n   */\n  head<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `HEAD` request to execute on the server. The `HEAD` method returns\n   * meta information about the resource without transferring the\n   * resource itself. See the individual overloads for\n   * details on the return type.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('HEAD', url, options as any);\n  }\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * @return An `Observable` of the response object, with response body as an object.\n   */\n  jsonp(url: string, callbackParam: string): Observable<Object>;\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * You must install a suitable interceptor, such as one provided by `HttpClientJsonpModule`.\n   * If no such interceptor is reached,\n   * then the `JSONP` request can be rejected by the configured backend.\n   *\n   * @return An `Observable` of the response object, with response body in the requested type.\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes a request with the special method\n   * `JSONP` to be dispatched via the interceptor pipeline.\n   * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n   * API endpoints that don't support newer,\n   * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n   * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n   * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n   * application making the request.\n   * The endpoint API must support JSONP callback for JSONP requests to work.\n   * The resource API returns the JSON response wrapped in a callback function.\n   * You can pass the callback function name as one of the query parameters.\n   * Note that JSONP requests can only be used with `GET` requests.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T> {\n    return this.request<any>('JSONP', url, {\n      params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n      observe: 'body',\n      responseType: 'json',\n    });\n  }\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an\n   * `ArrayBuffer` and returns the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request with the response\n   * body of type `Object`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as text stream\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs an `OPTIONS` request that interprets the body as JSON and returns the\n   * response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  options(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and returns the\n   * response in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse`, with a response body of the given type.\n   */\n  options<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes the configured\n   * `OPTIONS` request to execute on the server. This method allows the client\n   * to determine the supported HTTP methods and other capabilities of an endpoint,\n   * without implying a resource action. See the individual overloads for\n   * details on the return type.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('OPTIONS', url, options as any);\n  }\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and returns\n   * the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the response\n   * as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and\n   *  returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with the\n   * response body as `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text string and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with a\n   * response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body of type `Object`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  patch<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text stream and returns the\n   * full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs a `PATCH` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  patch(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the response in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PATCH` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('PATCH', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and returns\n   * an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the\n   * response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob`\n   * and returns the response in an observable of the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response body as `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a POST request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with a response body of type `Object`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a POST request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  post<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a POST request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request, with the response body as an\n   * `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text stream and returns\n   * the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body of type\n   * `Object`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON and returns the\n   * full `HttpResponse`.\n   *\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body in the\n   * requested type.\n   */\n  post<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns the response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  post(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns an observable of the response.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request, with a response body in the\n   * requested type.\n   */\n  post<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `POST` request to execute on the server. The server responds with the location of\n   * the replaced resource. See the individual overloads for\n   * details on the return type.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('POST', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and returns the\n   * response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body\n   * of type string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body of\n   * type `Object`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the\n   * full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an\n   * `ArrayBuffer` and returns an observable of the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with the response body as an\n   * `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text stream and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body of type\n   * string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the full\n   * HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body\n   * of type 'Object`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an instance of the requested type and\n   * returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON\n   * and returns an observable of JavaScript object.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response as a JavaScript object.\n   */\n  put(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an instance of the requested type\n   * and returns an observable of the requested type.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the requested type.\n   */\n  put<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n   * with a new set of values.\n   * See the individual overloads for details on the return type.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('PUT', url, addBody(options, body));\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EnvironmentInjector, inject, Injectable, InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\n *\n * Most interceptors transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n * An interceptor may transform the\n * response event stream as well, by applying additional RxJS operators on the stream\n * returned by `next.handle()`.\n *\n * More rarely, an interceptor may handle the request entirely,\n * and compose a new event stream instead of invoking `next.handle()`. This is an\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\n *\n * It is also rare but valid for an interceptor to return multiple responses on the\n * event stream for a single request.\n *\n * @publicApi\n *\n * @see [HTTP Guide](guide/http#intercepting-requests-and-responses)\n *\n * @usageNotes\n *\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\n * only in your `AppModule`, and add the interceptors to the root application injector.\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the\n * interceptors provided in the root module.\n */\nexport interface HttpInterceptor {\n  /**\n   * Identifies and handles a given HTTP request.\n   * @param req The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n\n/**\n * Represents the next interceptor in an interceptor chain, or the real backend if there are no\n * further interceptors.\n *\n * Most interceptors will delegate to this function, and either modify the outgoing request or the\n * response when it arrives. Within the scope of the current request, however, this function may be\n * called any number of times, for any number of downstream requests. Such downstream requests need\n * not be to the same URL or even the same origin as the current request. It is also valid to not\n * call the downstream handler at all, and process the current request entirely within the\n * interceptor.\n *\n * This function should only be called within the scope of the request that's currently being\n * intercepted. Once that request is complete, this downstream handler function should not be\n * called.\n *\n * @publicApi\n *\n * @see [HTTP Guide](guide/http#intercepting-requests-and-responses)\n */\nexport type HttpHandlerFn = (req: HttpRequest<unknown>) => Observable<HttpEvent<unknown>>;\n\n/**\n * An interceptor for HTTP requests made via `HttpClient`.\n *\n * `HttpInterceptorFn`s are middleware functions which `HttpClient` calls when a request is made.\n * These functions have the opportunity to modify the outgoing request or any response that comes\n * back, as well as block, redirect, or otherwise change the request or response semantics.\n *\n * An `HttpHandlerFn` representing the next interceptor (or the backend which will make a real HTTP\n * request) is provided. Most interceptors will delegate to this function, but that is not required\n * (see `HttpHandlerFn` for more details).\n *\n * `HttpInterceptorFn`s have access to `inject()` via the `EnvironmentInjector` from which they were\n * configured.\n */\nexport type HttpInterceptorFn = (req: HttpRequest<unknown>, next: HttpHandlerFn) =>\n    Observable<HttpEvent<unknown>>;\n\n/**\n * Function which invokes an HTTP interceptor chain.\n *\n * Each interceptor in the interceptor chain is turned into a `ChainedInterceptorFn` which closes\n * over the rest of the chain (represented by another `ChainedInterceptorFn`). The last such\n * function in the chain will instead delegate to the `finalHandlerFn`, which is passed down when\n * the chain is invoked.\n *\n * This pattern allows for a chain of many interceptors to be composed and wrapped in a single\n * `HttpInterceptorFn`, which is a useful abstraction for including different kinds of interceptors\n * (e.g. legacy class-based interceptors) in the same chain.\n */\ntype ChainedInterceptorFn<RequestT> = (req: HttpRequest<RequestT>, finalHandlerFn: HttpHandlerFn) =>\n    Observable<HttpEvent<RequestT>>;\n\nfunction interceptorChainEndFn(\n    req: HttpRequest<any>, finalHandlerFn: HttpHandlerFn): Observable<HttpEvent<any>> {\n  return finalHandlerFn(req);\n}\n\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\nfunction adaptLegacyInterceptorToChain(\n    chainTailFn: ChainedInterceptorFn<any>,\n    interceptor: HttpInterceptor): ChainedInterceptorFn<any> {\n  return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\n    handle: (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn),\n  });\n}\n\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\nfunction chainedInterceptorFn(\n    chainTailFn: ChainedInterceptorFn<unknown>, interceptorFn: HttpInterceptorFn,\n    injector: EnvironmentInjector): ChainedInterceptorFn<unknown> {\n  // clang-format off\n  return (initialRequest, finalHandlerFn) => injector.runInContext(() =>\n    interceptorFn(\n      initialRequest,\n      downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)\n    )\n  );\n  // clang-format on\n}\n\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nexport const HTTP_INTERCEPTORS =\n    new InjectionToken<HttpInterceptor[]>(ngDevMode ? 'HTTP_INTERCEPTORS' : '');\n\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\nexport const HTTP_INTERCEPTOR_FNS =\n    new InjectionToken<HttpInterceptorFn[]>(ngDevMode ? 'HTTP_INTERCEPTOR_FNS' : '');\n\n/**\n * A multi-provided token of `HttpInterceptorFn`s that are only set in root.\n */\nexport const HTTP_ROOT_INTERCEPTOR_FNS =\n    new InjectionToken<HttpInterceptorFn[]>(ngDevMode ? 'HTTP_ROOT_INTERCEPTOR_FNS' : '');\n\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\nexport function legacyInterceptorFnFactory(): HttpInterceptorFn {\n  let chain: ChainedInterceptorFn<any>|null = null;\n\n  return (req, handler) => {\n    if (chain === null) {\n      const interceptors = inject(HTTP_INTERCEPTORS, {optional: true}) ?? [];\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      chain = interceptors.reduceRight(\n          adaptLegacyInterceptorToChain, interceptorChainEndFn as ChainedInterceptorFn<any>);\n    }\n\n    return chain(req, handler);\n  };\n}\n\n@Injectable()\nexport class HttpInterceptorHandler extends HttpHandler {\n  private chain: ChainedInterceptorFn<unknown>|null = null;\n\n  constructor(private backend: HttpBackend, private injector: EnvironmentInjector) {\n    super();\n  }\n\n  override handle(initialRequest: HttpRequest<any>): Observable<HttpEvent<any>> {\n    if (this.chain === null) {\n      const dedupedInterceptorFns = Array.from(new Set([\n        ...this.injector.get(HTTP_INTERCEPTOR_FNS),\n        ...this.injector.get(HTTP_ROOT_INTERCEPTOR_FNS, []),\n      ]));\n\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      this.chain = dedupedInterceptorFns.reduceRight(\n          (nextSequencedFn, interceptorFn) =>\n              chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector),\n          interceptorChainEndFn as ChainedInterceptorFn<unknown>);\n    }\n    return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest));\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {EnvironmentInjector, Inject, inject, Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpHandlerFn} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpErrorResponse, HttpEvent, HttpEventType, HttpResponse, HttpStatusCode} from './response';\n\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId: number = 0;\n\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument: Document|undefined;\n\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nexport const JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nexport const JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nexport const JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nexport const JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nexport abstract class JsonpCallbackContext {\n  [key: string]: (data: any) => void;\n}\n\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nexport function jsonpCallbackContext(): Object {\n  if (typeof window === 'object') {\n    return window;\n  }\n  return {};\n}\n\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see {@link HttpHandler}\n * @see {@link HttpXhrBackend}\n *\n * @publicApi\n */\n@Injectable()\nexport class JsonpClientBackend implements HttpBackend {\n  /**\n   * A resolved promise that can be used to schedule microtasks in the event handlers.\n   */\n  private readonly resolvedPromise = Promise.resolve();\n\n  constructor(private callbackMap: JsonpCallbackContext, @Inject(DOCUMENT) private document: any) {}\n\n  /**\n   * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n   */\n  private nextCallback(): string {\n    return `ng_jsonp_callback_${nextRequestId++}`;\n  }\n\n  /**\n   * Processes a JSONP request and returns an event stream of the results.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   *\n   */\n  handle(req: HttpRequest<never>): Observable<HttpEvent<any>> {\n    // Firstly, check both the method and response type. If either doesn't match\n    // then the request was improperly routed here and cannot be handled.\n    if (req.method !== 'JSONP') {\n      throw new Error(JSONP_ERR_WRONG_METHOD);\n    } else if (req.responseType !== 'json') {\n      throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n    }\n\n    // Check the request headers. JSONP doesn't support headers and\n    // cannot set any that were supplied.\n    if (req.headers.keys().length > 0) {\n      throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n    }\n\n    // Everything else happens inside the Observable boundary.\n    return new Observable<HttpEvent<any>>((observer: Observer<HttpEvent<any>>) => {\n      // The first step to make a request is to generate the callback name, and replace the\n      // callback placeholder in the URL with the name. Care has to be taken here to ensure\n      // a trailing &, if matched, gets inserted back into the URL in the correct place.\n      const callback = this.nextCallback();\n      const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n\n      // Construct the <script> tag and point it at the URL.\n      const node = this.document.createElement('script');\n      node.src = url;\n\n      // A JSONP request requires waiting for multiple callbacks. These variables\n      // are closed over and track state across those callbacks.\n\n      // The response object, if one has been received, or null otherwise.\n      let body: any|null = null;\n\n      // Whether the response callback has been called.\n      let finished: boolean = false;\n\n      // Set the response callback in this.callbackMap (which will be the window\n      // object in the browser. The script being loaded via the <script> tag will\n      // eventually call this callback.\n      this.callbackMap[callback] = (data?: any) => {\n        // Data has been received from the JSONP script. Firstly, delete this callback.\n        delete this.callbackMap[callback];\n\n        // Set state to indicate data was received.\n        body = data;\n        finished = true;\n      };\n\n      // cleanup() is a utility closure that removes the <script> from the page and\n      // the response callback from the window. This logic is used in both the\n      // success, error, and cancellation paths, so it's extracted out for convenience.\n      const cleanup = () => {\n        // Remove the <script> tag if it's still on the page.\n        if (node.parentNode) {\n          node.parentNode.removeChild(node);\n        }\n\n        // Remove the response callback from the callbackMap (window object in the\n        // browser).\n        delete this.callbackMap[callback];\n      };\n\n      // onLoad() is the success callback which runs after the response callback\n      // if the JSONP script loads successfully. The event itself is unimportant.\n      // If something went wrong, onLoad() may run without the response callback\n      // having been invoked.\n      const onLoad = (event: Event) => {\n        // We wrap it in an extra Promise, to ensure the microtask\n        // is scheduled after the loaded endpoint has executed any potential microtask itself,\n        // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n        this.resolvedPromise.then(() => {\n          // Cleanup the page.\n          cleanup();\n\n          // Check whether the response callback has run.\n          if (!finished) {\n            // It hasn't, something went wrong with the request. Return an error via\n            // the Observable error path. All JSONP errors have status 0.\n            observer.error(new HttpErrorResponse({\n              url,\n              status: 0,\n              statusText: 'JSONP Error',\n              error: new Error(JSONP_ERR_NO_CALLBACK),\n            }));\n            return;\n          }\n\n          // Success. body either contains the response body or null if none was\n          // returned.\n          observer.next(new HttpResponse({\n            body,\n            status: HttpStatusCode.Ok,\n            statusText: 'OK',\n            url,\n          }));\n\n          // Complete the stream, the response is over.\n          observer.complete();\n        });\n      };\n\n      // onError() is the error callback, which runs if the script returned generates\n      // a Javascript error. It emits the error via the Observable error channel as\n      // a HttpErrorResponse.\n      const onError: any = (error: Error) => {\n        cleanup();\n\n        // Wrap the error in a HttpErrorResponse.\n        observer.error(new HttpErrorResponse({\n          error,\n          status: 0,\n          statusText: 'JSONP Error',\n          url,\n        }));\n      };\n\n      // Subscribe to both the success (load) and error events on the <script> tag,\n      // and add it to the page.\n      node.addEventListener('load', onLoad);\n      node.addEventListener('error', onError);\n      this.document.body.appendChild(node);\n\n      // The request has now been successfully sent.\n      observer.next({type: HttpEventType.Sent});\n\n      // Cancellation handler.\n      return () => {\n        if (!finished) {\n          this.removeListeners(node);\n        }\n\n        // And finally, clean up the page.\n        cleanup();\n      };\n    });\n  }\n\n  private removeListeners(script: HTMLScriptElement): void {\n    // Issue #34818\n    // Changing <script>'s ownerDocument will prevent it from execution.\n    // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n    if (!foreignDocument) {\n      foreignDocument = (this.document.implementation as DOMImplementation).createHTMLDocument();\n    }\n    foreignDocument.adoptNode(script);\n  }\n}\n\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\nexport function jsonpInterceptorFn(\n    req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> {\n  if (req.method === 'JSONP') {\n    return inject(JsonpClientBackend).handle(req as HttpRequest<never>);\n  }\n\n  // Fall through for normal HTTP requests.\n  return next(req);\n}\n\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see {@link HttpInterceptor}\n *\n * @publicApi\n */\n@Injectable()\nexport class JsonpInterceptor {\n  constructor(private injector: EnvironmentInjector) {}\n\n  /**\n   * Identifies and handles a given JSONP request.\n   * @param initialRequest The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(initialRequest: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return this.injector.runInContext(\n        () => jsonpInterceptorFn(\n            initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {XhrFactory} from '@angular/common';\nimport {Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend} from './backend';\nimport {HttpHeaders} from './headers';\nimport {HttpRequest} from './request';\nimport {HttpDownloadProgressEvent, HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaderResponse, HttpJsonParseError, HttpResponse, HttpStatusCode, HttpUploadProgressEvent} from './response';\n\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr: any): string|null {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see {@link HttpHandler}\n * @see {@link JsonpClientBackend}\n *\n * @publicApi\n */\n@Injectable()\nexport class HttpXhrBackend implements HttpBackend {\n  constructor(private xhrFactory: XhrFactory) {}\n\n  /**\n   * Processes a request and returns a stream of response events.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   */\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    // Quick check to give a better error message when a user attempts to use\n    // HttpClient.jsonp() without installing the HttpClientJsonpModule\n    if (req.method === 'JSONP') {\n      throw new Error(\n          `Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n    }\n\n    // Everything happens on Observable subscription.\n    return new Observable((observer: Observer<HttpEvent<any>>) => {\n      // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n      const xhr = this.xhrFactory.build();\n      xhr.open(req.method, req.urlWithParams);\n      if (!!req.withCredentials) {\n        xhr.withCredentials = true;\n      }\n\n      // Add all the requested headers.\n      req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n\n      // Add an Accept header if one isn't present already.\n      if (!req.headers.has('Accept')) {\n        xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n      }\n\n      // Auto-detect the Content-Type header if one isn't present already.\n      if (!req.headers.has('Content-Type')) {\n        const detectedType = req.detectContentTypeHeader();\n        // Sometimes Content-Type detection fails.\n        if (detectedType !== null) {\n          xhr.setRequestHeader('Content-Type', detectedType);\n        }\n      }\n\n      // Set the responseType if one was requested.\n      if (req.responseType) {\n        const responseType = req.responseType.toLowerCase();\n\n        // JSON responses need to be processed as text. This is because if the server\n        // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n        // xhr.response will be null, and xhr.responseText cannot be accessed to\n        // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n        // is parsed by first requesting text and then applying JSON.parse.\n        xhr.responseType = ((responseType !== 'json') ? responseType : 'text') as any;\n      }\n\n      // Serialize the request body if one is present. If not, this will be set to null.\n      const reqBody = req.serializeBody();\n\n      // If progress events are enabled, response headers will be delivered\n      // in two events - the HttpHeaderResponse event and the full HttpResponse\n      // event. However, since response headers don't change in between these\n      // two events, it doesn't make sense to parse them twice. So headerResponse\n      // caches the data extracted from the response whenever it's first parsed,\n      // to ensure parsing isn't duplicated.\n      let headerResponse: HttpHeaderResponse|null = null;\n\n      // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n      // state, and memoizes it into headerResponse.\n      const partialFromXhr = (): HttpHeaderResponse => {\n        if (headerResponse !== null) {\n          return headerResponse;\n        }\n\n        const statusText = xhr.statusText || 'OK';\n\n        // Parse headers from XMLHttpRequest - this step is lazy.\n        const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n\n        // Read the response URL from the XMLHttpResponse instance and fall back on the\n        // request URL.\n        const url = getResponseUrl(xhr) || req.url;\n\n        // Construct the HttpHeaderResponse and memoize it.\n        headerResponse = new HttpHeaderResponse({headers, status: xhr.status, statusText, url});\n        return headerResponse;\n      };\n\n      // Next, a few closures are defined for the various events which XMLHttpRequest can\n      // emit. This allows them to be unregistered as event listeners later.\n\n      // First up is the load event, which represents a response being fully available.\n      const onLoad = () => {\n        // Read response state from the memoized partial data.\n        let {headers, status, statusText, url} = partialFromXhr();\n\n        // The body will be read out if present.\n        let body: any|null = null;\n\n        if (status !== HttpStatusCode.NoContent) {\n          // Use XMLHttpRequest.response if set, responseText otherwise.\n          body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n        }\n\n        // Normalize another potential bug (this one comes from CORS).\n        if (status === 0) {\n          status = !!body ? HttpStatusCode.Ok : 0;\n        }\n\n        // ok determines whether the response will be transmitted on the event or\n        // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n        // but a successful status code can still result in an error if the user\n        // asked for JSON data and the body cannot be parsed as such.\n        let ok = status >= 200 && status < 300;\n\n        // Check whether the body needs to be parsed as JSON (in many cases the browser\n        // will have done that already).\n        if (req.responseType === 'json' && typeof body === 'string') {\n          // Save the original body, before attempting XSSI prefix stripping.\n          const originalBody = body;\n          body = body.replace(XSSI_PREFIX, '');\n          try {\n            // Attempt the parse. If it fails, a parse error should be delivered to the user.\n            body = body !== '' ? JSON.parse(body) : null;\n          } catch (error) {\n            // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n            // JSON response. Restore the original body (including any XSSI prefix) to deliver\n            // a better error response.\n            body = originalBody;\n\n            // If this was an error request to begin with, leave it as a string, it probably\n            // just isn't JSON. Otherwise, deliver the parsing error to the user.\n            if (ok) {\n              // Even though the response status was 2xx, this is still an error.\n              ok = false;\n              // The parse error contains the text of the body that failed to parse.\n              body = {error, text: body} as HttpJsonParseError;\n            }\n          }\n        }\n\n        if (ok) {\n          // A successful response is delivered on the event stream.\n          observer.next(new HttpResponse({\n            body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined,\n          }));\n          // The full body has been received and delivered, no further events\n          // are possible. This request is complete.\n          observer.complete();\n        } else {\n          // An unsuccessful request is delivered on the error channel.\n          observer.error(new HttpErrorResponse({\n            // The error in this case is the response body (error from the server).\n            error: body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined,\n          }));\n        }\n      };\n\n      // The onError callback is called when something goes wrong at the network level.\n      // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n      // transmitted on the error channel.\n      const onError = (error: ProgressEvent) => {\n        const {url} = partialFromXhr();\n        const res = new HttpErrorResponse({\n          error,\n          status: xhr.status || 0,\n          statusText: xhr.statusText || 'Unknown Error',\n          url: url || undefined,\n        });\n        observer.error(res);\n      };\n\n      // The sentHeaders flag tracks whether the HttpResponseHeaders event\n      // has been sent on the stream. This is necessary to track if progress\n      // is enabled since the event will be sent on only the first download\n      // progress event.\n      let sentHeaders = false;\n\n      // The download progress event handler, which is only registered if\n      // progress events are enabled.\n      const onDownProgress = (event: ProgressEvent) => {\n        // Send the HttpResponseHeaders event if it hasn't been sent already.\n        if (!sentHeaders) {\n          observer.next(partialFromXhr());\n          sentHeaders = true;\n        }\n\n        // Start building the download progress event to deliver on the response\n        // event stream.\n        let progressEvent: HttpDownloadProgressEvent = {\n          type: HttpEventType.DownloadProgress,\n          loaded: event.loaded,\n        };\n\n        // Set the total number of bytes in the event if it's available.\n        if (event.lengthComputable) {\n          progressEvent.total = event.total;\n        }\n\n        // If the request was for text content and a partial response is\n        // available on XMLHttpRequest, include it in the progress event\n        // to allow for streaming reads.\n        if (req.responseType === 'text' && !!xhr.responseText) {\n          progressEvent.partialText = xhr.responseText;\n        }\n\n        // Finally, fire the event.\n        observer.next(progressEvent);\n      };\n\n      // The upload progress event handler, which is only registered if\n      // progress events are enabled.\n      const onUpProgress = (event: ProgressEvent) => {\n        // Upload progress events are simpler. Begin building the progress\n        // event.\n        let progress: HttpUploadProgressEvent = {\n          type: HttpEventType.UploadProgress,\n          loaded: event.loaded,\n        };\n\n        // If the total number of bytes being uploaded is available, include\n        // it.\n        if (event.lengthComputable) {\n          progress.total = event.total;\n        }\n\n        // Send the event.\n        observer.next(progress);\n      };\n\n      // By default, register for load and error events.\n      xhr.addEventListener('load', onLoad);\n      xhr.addEventListener('error', onError);\n      xhr.addEventListener('timeout', onError);\n      xhr.addEventListener('abort', onError);\n\n      // Progress events are only enabled if requested.\n      if (req.reportProgress) {\n        // Download progress is always enabled if requested.\n        xhr.addEventListener('progress', onDownProgress);\n\n        // Upload progress depends on whether there is a body to upload.\n        if (reqBody !== null && xhr.upload) {\n          xhr.upload.addEventListener('progress', onUpProgress);\n        }\n      }\n\n      let macroTaskCanceller: VoidFunction|undefined;\n\n      /** Tear down logic to cancel the backround macrotask. */\n      const onLoadStart = () => {\n        macroTaskCanceller ??= createBackgroundMacroTask();\n      };\n      const onLoadEnd = () => {\n        macroTaskCanceller?.();\n      };\n\n      xhr.addEventListener('loadstart', onLoadStart);\n      xhr.addEventListener('loadend', onLoadEnd);\n\n      // Fire the request, and notify the event stream that it was fired.\n      xhr.send(reqBody!);\n      observer.next({type: HttpEventType.Sent});\n      // This is the return from the Observable function, which is the\n      // request cancellation handler.\n      return () => {\n        // On a cancellation, remove all registered event listeners.\n        xhr.removeEventListener('loadstart', onLoadStart);\n        xhr.removeEventListener('loadend', onLoadEnd);\n        xhr.removeEventListener('error', onError);\n        xhr.removeEventListener('abort', onError);\n        xhr.removeEventListener('load', onLoad);\n        xhr.removeEventListener('timeout', onError);\n\n        //  Cancel the background macrotask.\n        macroTaskCanceller?.();\n\n        if (req.reportProgress) {\n          xhr.removeEventListener('progress', onDownProgress);\n          if (reqBody !== null && xhr.upload) {\n            xhr.upload.removeEventListener('progress', onUpProgress);\n          }\n        }\n\n        // Finally, abort the in-flight request.\n        if (xhr.readyState !== xhr.DONE) {\n          xhr.abort();\n        }\n      };\n    });\n  }\n}\n\n// Cannot use `Number.MAX_VALUE` as it does not fit into a 32-bit signed integer.\nconst MAX_INT = 2147483647;\n\n/**\n * A method that creates a background macrotask of up to Number.MAX_VALUE.\n *\n * This is so that Zone.js can intercept HTTP calls, this is important for server rendering,\n * as the application is only rendered once the application is stabilized, meaning there are pending\n * macro and micro tasks.\n *\n * @returns a callback method to cancel the macrotask.\n */\nfunction createBackgroundMacroTask(): VoidFunction {\n  const timeout = setTimeout(() => void 0, MAX_INT);\n\n  return () => clearTimeout(timeout);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵparseCookieValue as parseCookieValue} from '@angular/common';\nimport {EnvironmentInjector, Inject, inject, Injectable, InjectionToken, PLATFORM_ID} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpHandler} from './backend';\nimport {HttpHandlerFn, HttpInterceptor} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\nexport const XSRF_ENABLED = new InjectionToken<boolean>('XSRF_ENABLED');\n\nexport const XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nexport const XSRF_COOKIE_NAME = new InjectionToken<string>('XSRF_COOKIE_NAME', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_COOKIE_NAME,\n});\n\nexport const XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nexport const XSRF_HEADER_NAME = new InjectionToken<string>('XSRF_HEADER_NAME', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_HEADER_NAME,\n});\n\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nexport abstract class HttpXsrfTokenExtractor {\n  /**\n   * Get the XSRF token to use with an outgoing request.\n   *\n   * Will be called for every request, so the token may change between requests.\n   */\n  abstract getToken(): string|null;\n}\n\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\n@Injectable()\nexport class HttpXsrfCookieExtractor implements HttpXsrfTokenExtractor {\n  private lastCookieString: string = '';\n  private lastToken: string|null = null;\n\n  /**\n   * @internal for testing\n   */\n  parseCount: number = 0;\n\n  constructor(\n      @Inject(DOCUMENT) private doc: any, @Inject(PLATFORM_ID) private platform: string,\n      @Inject(XSRF_COOKIE_NAME) private cookieName: string) {}\n\n  getToken(): string|null {\n    if (this.platform === 'server') {\n      return null;\n    }\n    const cookieString = this.doc.cookie || '';\n    if (cookieString !== this.lastCookieString) {\n      this.parseCount++;\n      this.lastToken = parseCookieValue(cookieString, this.cookieName);\n      this.lastCookieString = cookieString;\n    }\n    return this.lastToken;\n  }\n}\n\nexport function xsrfInterceptorFn(\n    req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> {\n  const lcUrl = req.url.toLowerCase();\n  // Skip both non-mutating requests and absolute URLs.\n  // Non-mutating requests don't require a token, and absolute URLs require special handling\n  // anyway as the cookie set\n  // on our origin is not the same as the token expected by another origin.\n  if (!inject(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' ||\n      lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n    return next(req);\n  }\n\n  const token = inject(HttpXsrfTokenExtractor).getToken();\n  const headerName = inject(XSRF_HEADER_NAME);\n\n  // Be careful not to overwrite an existing header of the same name.\n  if (token != null && !req.headers.has(headerName)) {\n    req = req.clone({headers: req.headers.set(headerName, token)});\n  }\n  return next(req);\n}\n\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\n@Injectable()\nexport class HttpXsrfInterceptor implements HttpInterceptor {\n  constructor(private injector: EnvironmentInjector) {}\n\n  intercept(initialRequest: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return this.injector.runInContext(\n        () =>\n            xsrfInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EnvironmentProviders, inject, InjectionToken, makeEnvironmentProviders, Provider} from '@angular/core';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpClient} from './client';\nimport {HTTP_INTERCEPTOR_FNS, HttpInterceptorFn, HttpInterceptorHandler, legacyInterceptorFnFactory} from './interceptor';\nimport {jsonpCallbackContext, JsonpCallbackContext, JsonpClientBackend, jsonpInterceptorFn} from './jsonp';\nimport {HttpXhrBackend} from './xhr';\nimport {HttpXsrfCookieExtractor, HttpXsrfTokenExtractor, XSRF_COOKIE_NAME, XSRF_ENABLED, XSRF_HEADER_NAME, xsrfInterceptorFn} from './xsrf';\n\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\nexport enum HttpFeatureKind {\n  Interceptors,\n  LegacyInterceptors,\n  CustomXsrfConfiguration,\n  NoXsrfProtection,\n  JsonpSupport,\n  RequestsMadeViaParent,\n}\n\n/**\n * A feature for use when configuring `provideHttpClient`.\n *\n * @publicApi\n */\nexport interface HttpFeature<KindT extends HttpFeatureKind> {\n  ɵkind: KindT;\n  ɵproviders: Provider[];\n}\n\nfunction makeHttpFeature<KindT extends HttpFeatureKind>(\n    kind: KindT, providers: Provider[]): HttpFeature<KindT> {\n  return {\n    ɵkind: kind,\n    ɵproviders: providers,\n  };\n}\n\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * @see {@link withInterceptors}\n * @see {@link withInterceptorsFromDi}\n * @see {@link withXsrfConfiguration}\n * @see {@link withNoXsrfProtection}\n * @see {@link withJsonpSupport}\n * @see {@link withRequestsMadeViaParent}\n */\nexport function provideHttpClient(...features: HttpFeature<HttpFeatureKind>[]):\n    EnvironmentProviders {\n  if (ngDevMode) {\n    const featureKinds = new Set(features.map(f => f.ɵkind));\n    if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) &&\n        featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n      throw new Error(\n          ngDevMode ?\n              `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` :\n              '');\n    }\n  }\n\n  const providers: Provider[] = [\n    HttpClient,\n    HttpXhrBackend,\n    HttpInterceptorHandler,\n    {provide: HttpHandler, useExisting: HttpInterceptorHandler},\n    {provide: HttpBackend, useExisting: HttpXhrBackend},\n    {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useValue: xsrfInterceptorFn,\n      multi: true,\n    },\n    {provide: XSRF_ENABLED, useValue: true},\n    {provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor},\n  ];\n\n  for (const feature of features) {\n    providers.push(...feature.ɵproviders);\n  }\n\n  return makeEnvironmentProviders(providers);\n}\n\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see {@link HttpInterceptorFn}\n * @see {@link provideHttpClient}\n * @publicApi\n */\nexport function withInterceptors(interceptorFns: HttpInterceptorFn[]):\n    HttpFeature<HttpFeatureKind.Interceptors> {\n  return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(interceptorFn => {\n    return {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useValue: interceptorFn,\n      multi: true,\n    };\n  }));\n}\n\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken<HttpInterceptorFn>('LEGACY_INTERCEPTOR_FN');\n\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see {@link HttpInterceptor}\n * @see {@link HTTP_INTERCEPTORS}\n * @see {@link provideHttpClient}\n */\nexport function withInterceptorsFromDi(): HttpFeature<HttpFeatureKind.LegacyInterceptors> {\n  // Note: the legacy interceptor function is provided here via an intermediate token\n  // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n  // included multiple times, all of the multi-provider entries will have the same instance of the\n  // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n  // interceptors will not run multiple times.\n  return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [\n    {\n      provide: LEGACY_INTERCEPTOR_FN,\n      useFactory: legacyInterceptorFnFactory,\n    },\n    {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useExisting: LEGACY_INTERCEPTOR_FN,\n      multi: true,\n    }\n  ]);\n}\n\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see {@link provideHttpClient}\n */\nexport function withXsrfConfiguration(\n    {cookieName, headerName}: {cookieName?: string, headerName?: string}):\n    HttpFeature<HttpFeatureKind.CustomXsrfConfiguration> {\n  const providers: Provider[] = [];\n  if (cookieName !== undefined) {\n    providers.push({provide: XSRF_COOKIE_NAME, useValue: cookieName});\n  }\n  if (headerName !== undefined) {\n    providers.push({provide: XSRF_HEADER_NAME, useValue: headerName});\n  }\n\n  return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see {@link provideHttpClient}\n */\nexport function withNoXsrfProtection(): HttpFeature<HttpFeatureKind.NoXsrfProtection> {\n  return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [\n    {\n      provide: XSRF_ENABLED,\n      useValue: false,\n    },\n  ]);\n}\n\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see {@link provideHttpClient}\n */\nexport function withJsonpSupport(): HttpFeature<HttpFeatureKind.JsonpSupport> {\n  return makeHttpFeature(HttpFeatureKind.JsonpSupport, [\n    JsonpClientBackend,\n    {provide: JsonpCallbackContext, useFactory: jsonpCallbackContext},\n    {provide: HTTP_INTERCEPTOR_FNS, useValue: jsonpInterceptorFn, multi: true},\n  ]);\n}\n\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see {@link provideHttpClient}\n * @developerPreview\n */\nexport function withRequestsMadeViaParent(): HttpFeature<HttpFeatureKind.RequestsMadeViaParent> {\n  return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [\n    {\n      provide: HttpBackend,\n      useFactory: () => {\n        const handlerFromParent = inject(HttpHandler, {skipSelf: true, optional: true});\n        if (ngDevMode && handlerFromParent === null) {\n          throw new Error(\n              'withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n        }\n        return handlerFromParent;\n      },\n    },\n  ]);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {HTTP_INTERCEPTORS} from './interceptor';\nimport {provideHttpClient, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withXsrfConfiguration} from './provider';\nimport {HttpXsrfCookieExtractor, HttpXsrfInterceptor, HttpXsrfTokenExtractor, XSRF_DEFAULT_COOKIE_NAME, XSRF_DEFAULT_HEADER_NAME, XSRF_ENABLED} from './xsrf';\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    HttpXsrfInterceptor,\n    {provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true},\n    {provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor},\n    withXsrfConfiguration({\n      cookieName: XSRF_DEFAULT_COOKIE_NAME,\n      headerName: XSRF_DEFAULT_HEADER_NAME,\n    }).ɵproviders,\n    {provide: XSRF_ENABLED, useValue: true},\n  ],\n})\nexport class HttpClientXsrfModule {\n  /**\n   * Disable the default XSRF protection.\n   */\n  static disable(): ModuleWithProviders<HttpClientXsrfModule> {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [\n        withNoXsrfProtection().ɵproviders,\n      ],\n    };\n  }\n\n  /**\n   * Configure XSRF protection.\n   * @param options An object that can specify either or both\n   * cookie name or header name.\n   * - Cookie name default is `XSRF-TOKEN`.\n   * - Header name default is `X-XSRF-TOKEN`.\n   *\n   */\n  static withOptions(options: {\n    cookieName?: string,\n    headerName?: string,\n  } = {}): ModuleWithProviders<HttpClientXsrfModule> {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: withXsrfConfiguration(options).ɵproviders,\n    };\n  }\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n@NgModule({\n  /**\n   * Configures the [dependency injector](guide/glossary#injector) where it is imported\n   * with supporting services for HTTP communications.\n   */\n  providers: [\n    provideHttpClient(withInterceptorsFromDi()),\n  ],\n})\nexport class HttpClientModule {\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    withJsonpSupport().ɵproviders,\n  ],\n})\nexport class HttpClientJsonpModule {\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_BOOTSTRAP_LISTENER, ApplicationRef, inject, InjectionToken, makeStateKey, Provider, StateKey, TransferState, ɵENABLED_SSR_FEATURES as ENABLED_SSR_FEATURES, ɵInitialRenderPendingTasks as InitialRenderPendingTasks} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {first, tap} from 'rxjs/operators';\n\nimport {HttpHeaders} from './headers';\nimport {HTTP_ROOT_INTERCEPTOR_FNS, HttpHandlerFn} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpEvent, HttpResponse} from './response';\n\ninterface TransferHttpResponse {\n  body: any;\n  headers: Record<string, string[]>;\n  status?: number;\n  statusText?: string;\n  url?: string;\n  responseType?: HttpRequest<unknown>['responseType'];\n}\n\nconst CACHE_STATE = new InjectionToken<{isCacheActive: boolean}>(\n    ngDevMode ? 'HTTP_TRANSFER_STATE_CACHE_STATE' : '');\n\n/**\n * A list of allowed HTTP methods to cache.\n */\nconst ALLOWED_METHODS = ['GET', 'HEAD'];\n\nexport function transferCacheInterceptorFn(\n    req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> {\n  const {isCacheActive} = inject(CACHE_STATE);\n\n  // Stop using the cache if the application has stabilized, indicating initial rendering\n  // is complete.\n  if (!isCacheActive || !ALLOWED_METHODS.includes(req.method)) {\n    // Cache is no longer active or method is not HEAD or GET.\n    // Pass the request through.\n    return next(req);\n  }\n\n  const transferState = inject(TransferState);\n  const storeKey = makeCacheKey(req);\n  const response = transferState.get(storeKey, null);\n\n  if (response) {\n    // Request found in cache. Respond using it.\n    let body: ArrayBuffer|Blob|string|undefined = response.body;\n\n    switch (response.responseType) {\n      case 'arraybuffer':\n        body = new TextEncoder().encode(response.body).buffer;\n        break;\n      case 'blob':\n        body = new Blob([response.body]);\n        break;\n    }\n\n    return of(\n        new HttpResponse({\n          body,\n          headers: new HttpHeaders(response.headers),\n          status: response.status,\n          statusText: response.statusText,\n          url: response.url,\n        }),\n    );\n  }\n\n  // Request not found in cache. Make the request and cache it.\n  return next(req).pipe(\n      tap((event: HttpEvent<unknown>) => {\n        if (event instanceof HttpResponse) {\n          transferState.set<TransferHttpResponse>(storeKey, {\n            body: event.body,\n            headers: getHeadersMap(event.headers),\n            status: event.status,\n            statusText: event.statusText,\n            url: event.url || '',\n            responseType: req.responseType,\n          });\n        }\n      }),\n  );\n}\n\nfunction getHeadersMap(headers: HttpHeaders): Record<string, string[]> {\n  const headersMap: Record<string, string[]> = {};\n\n  for (const key of headers.keys()) {\n    const values = headers.getAll(key);\n    if (values !== null) {\n      headersMap[key] = values;\n    }\n  }\n\n  return headersMap;\n}\n\nfunction makeCacheKey(request: HttpRequest<any>): StateKey<TransferHttpResponse> {\n  // make the params encoded same as a url so it's easy to identify\n  const {params, method, responseType, url} = request;\n  const encodedParams = params.keys().sort().map((k) => `${k}=${params.getAll(k)}`).join('&');\n  const key = method + '.' + responseType + '.' + url + '?' + encodedParams;\n\n  const hash = generateHash(key);\n\n  return makeStateKey(hash);\n}\n\n/**\n * A method that returns a hash representation of a string using a variant of DJB2 hash\n * algorithm.\n *\n * This is the same hashing logic that is used to generate component ids.\n */\nfunction generateHash(value: string): string {\n  let hash = 0;\n\n  for (const char of value) {\n    hash = Math.imul(31, hash) + char.charCodeAt(0) << 0;\n  }\n\n  // Force positive number hash.\n  // 2147483647 = equivalent of Integer.MAX_VALUE.\n  hash += 2147483647 + 1;\n\n  return hash.toString();\n}\n\n/**\n * Returns the DI providers needed to enable HTTP transfer cache.\n *\n * By default, when using server rendering, requests are performed twice: once on the server and\n * other one on the browser.\n *\n * When these providers are added, requests performed on the server are cached and reused during the\n * bootstrapping of the application in the browser thus avoiding duplicate requests and reducing\n * load time.\n *\n */\nexport function withHttpTransferCache(): Provider[] {\n  return [\n    {\n      provide: CACHE_STATE,\n      useFactory: () => {\n        inject(ENABLED_SSR_FEATURES).add('httpcache');\n        return {isCacheActive: true};\n      }\n    },\n    {\n      provide: HTTP_ROOT_INTERCEPTOR_FNS,\n      useValue: transferCacheInterceptorFn,\n      multi: true,\n      deps: [TransferState, CACHE_STATE]\n    },\n    {\n      provide: APP_BOOTSTRAP_LISTENER,\n      multi: true,\n      useFactory: () => {\n        const appRef = inject(ApplicationRef);\n        const cacheState = inject(CACHE_STATE);\n        const pendingTasks = inject(InitialRenderPendingTasks);\n\n        return () => {\n          const isStablePromise = appRef.isStable.pipe(first((isStable) => isStable)).toPromise();\n          isStablePromise.then(() => pendingTasks.whenAllTasksComplete).then(() => {\n            cacheState.isCacheActive = false;\n          });\n        };\n      },\n      deps: [ApplicationRef, CACHE_STATE, InitialRenderPendingTasks]\n    }\n  ];\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵDomAdapter as DomAdapter} from '@angular/common';\n\n\n\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport abstract class GenericBrowserDomAdapter extends DomAdapter {\n  override readonly supportsDOMEvents: boolean = true;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵparseCookieValue as parseCookieValue, ɵsetRootDomAdapter as setRootDomAdapter} from '@angular/common';\n\nimport {GenericBrowserDomAdapter} from './generic_browser_adapter';\n\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n/* tslint:disable:requireParameterType no-console */\nexport class BrowserDomAdapter extends GenericBrowserDomAdapter {\n  static makeCurrent() {\n    setRootDomAdapter(new BrowserDomAdapter());\n  }\n\n  override onAndCancel(el: Node, evt: any, listener: any): Function {\n    el.addEventListener(evt, listener);\n    return () => {\n      el.removeEventListener(evt, listener);\n    };\n  }\n  override dispatchEvent(el: Node, evt: any) {\n    el.dispatchEvent(evt);\n  }\n  override remove(node: Node): void {\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  }\n  override createElement(tagName: string, doc?: Document): HTMLElement {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElement(tagName);\n  }\n  override createHtmlDocument(): Document {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n  override getDefaultDocument(): Document {\n    return document;\n  }\n\n  override isElementNode(node: Node): boolean {\n    return node.nodeType === Node.ELEMENT_NODE;\n  }\n\n  override isShadowRoot(node: any): boolean {\n    return node instanceof DocumentFragment;\n  }\n\n  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */\n  override getGlobalEventTarget(doc: Document, target: string): EventTarget|null {\n    if (target === 'window') {\n      return window;\n    }\n    if (target === 'document') {\n      return doc;\n    }\n    if (target === 'body') {\n      return doc.body;\n    }\n    return null;\n  }\n  override getBaseHref(doc: Document): string|null {\n    const href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n  override resetBaseElement(): void {\n    baseElement = null;\n  }\n  override getUserAgent(): string {\n    return window.navigator.userAgent;\n  }\n  override getCookie(name: string): string|null {\n    return parseCookieValue(document.cookie, name);\n  }\n}\n\nlet baseElement: HTMLElement|null = null;\nfunction getBaseElementHref(): string|null {\n  baseElement = baseElement || document.querySelector('base');\n  return baseElement ? baseElement.getAttribute('href') : null;\n}\n\n// based on urlUtils.js in AngularJS 1\nlet urlParsingNode: HTMLAnchorElement|undefined;\nfunction relativePath(url: any): string {\n  urlParsingNode = urlParsingNode || document.createElement('a');\n  urlParsingNode.setAttribute('href', url);\n  const pathName = urlParsingNode.pathname;\n  return pathName.charAt(0) === '/' ? pathName : `/${pathName}`;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {GetTestability, Testability, TestabilityRegistry, ɵglobal as global} from '@angular/core';\n\nexport class BrowserGetTestability implements GetTestability {\n  addToWindow(registry: TestabilityRegistry): void {\n    global['getAngularTestability'] = (elem: any, findInAncestors: boolean = true) => {\n      const testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new Error('Could not find testability for element.');\n      }\n      return testability;\n    };\n\n    global['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n\n    global['getAllAngularRootElements'] = () => registry.getAllRootElements();\n\n    const whenAllStable = (callback: any /** TODO #9100 */) => {\n      const testabilities = global['getAllAngularTestabilities']();\n      let count = testabilities.length;\n      let didWork = false;\n      const decrement = function(didWork_: any /** TODO #9100 */) {\n        didWork = didWork || didWork_;\n        count--;\n        if (count == 0) {\n          callback(didWork);\n        }\n      };\n      testabilities.forEach(function(testability: any /** TODO #9100 */) {\n        testability.whenStable(decrement);\n      });\n    };\n\n    if (!global['frameworkStabilizers']) {\n      global['frameworkStabilizers'] = [];\n    }\n    global['frameworkStabilizers'].push(whenAllStable);\n  }\n\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    if (elem == null) {\n      return null;\n    }\n    const t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (getDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, (<any>elem).host, true);\n    }\n    return this.findTestabilityInTree(registry, elem.parentElement, true);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {XhrFactory} from '@angular/common';\nimport {Injectable} from '@angular/core';\n\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n */\n@Injectable()\nexport class BrowserXhr implements XhrFactory {\n  build(): XMLHttpRequest {\n    return new XMLHttpRequest();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken, NgZone} from '@angular/core';\n\n/**\n * The injection token for the event-manager plug-in service.\n *\n * @publicApi\n */\nexport const EVENT_MANAGER_PLUGINS =\n    new InjectionToken<EventManagerPlugin[]>('EventManagerPlugins');\n\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\n@Injectable()\nexport class EventManager {\n  private _plugins: EventManagerPlugin[];\n  private _eventNameToPlugin = new Map<string, EventManagerPlugin>();\n\n  /**\n   * Initializes an instance of the event-manager service.\n   */\n  constructor(@Inject(EVENT_MANAGER_PLUGINS) plugins: EventManagerPlugin[], private _zone: NgZone) {\n    plugins.forEach((plugin) => {\n      plugin.manager = this;\n    });\n    this._plugins = plugins.slice().reverse();\n  }\n\n  /**\n   * Registers a handler for a specific element and event.\n   *\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns  A callback function that can be used to remove the handler.\n   */\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler);\n  }\n\n  /**\n   * Retrieves the compilation zone in which event listeners are registered.\n   */\n  getZone(): NgZone {\n    return this._zone;\n  }\n\n  /** @internal */\n  _findPluginFor(eventName: string): EventManagerPlugin {\n    const plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n\n    const plugins = this._plugins;\n    for (let i = 0; i < plugins.length; i++) {\n      const plugin = plugins[i];\n      if (plugin.supports(eventName)) {\n        this._eventNameToPlugin.set(eventName, plugin);\n        return plugin;\n      }\n    }\n    throw new Error(`No event manager plugin found for event ${eventName}`);\n  }\n}\n\nexport abstract class EventManagerPlugin {\n  constructor(private _doc: any) {}\n\n  // Using non-null assertion because it's set by EventManager's constructor\n  manager!: EventManager;\n\n  abstract supports(eventName: string): boolean;\n\n  abstract addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, isPlatformServer} from '@angular/common';\nimport {APP_ID, CSP_NONCE, Inject, Injectable, OnDestroy, Optional, PLATFORM_ID} from '@angular/core';\n\n/** The style elements attribute name used to set value of `APP_ID` token. */\nconst APP_ID_ATTRIBUTE_NAME = 'ng-app-id';\n\n@Injectable()\nexport class SharedStylesHost implements OnDestroy {\n  // Maps all registered host nodes to a list of style nodes that have been added to the host node.\n  private readonly styleRef = new Map < string /** Style string */, {\n    elements: HTMLStyleElement[];\n    usage: number\n  }\n  > ();\n  private readonly hostNodes = new Set<Node>();\n  private readonly styleNodesInDOM: Map<string, HTMLStyleElement>|null;\n  private readonly platformIsServer: boolean;\n\n  constructor(\n      @Inject(DOCUMENT) private readonly doc: Document,\n      @Inject(APP_ID) private readonly appId: string,\n      @Inject(CSP_NONCE) @Optional() private nonce?: string|null,\n      @Inject(PLATFORM_ID) readonly platformId: object = {}) {\n    this.styleNodesInDOM = this.collectServerRenderedStyles();\n    this.platformIsServer = isPlatformServer(platformId);\n    this.resetHostNodes();\n  }\n\n  addStyles(styles: string[]): void {\n    for (const style of styles) {\n      const usageCount = this.changeUsageCount(style, 1);\n\n      if (usageCount === 1) {\n        this.onStyleAdded(style);\n      }\n    }\n  }\n\n  removeStyles(styles: string[]): void {\n    for (const style of styles) {\n      const usageCount = this.changeUsageCount(style, -1);\n\n      if (usageCount <= 0) {\n        this.onStyleRemoved(style);\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    const styleNodesInDOM = this.styleNodesInDOM;\n    if (styleNodesInDOM) {\n      styleNodesInDOM.forEach((node) => node.remove());\n      styleNodesInDOM.clear();\n    }\n\n    for (const style of this.getAllStyles()) {\n      this.onStyleRemoved(style);\n    }\n\n    this.resetHostNodes();\n  }\n\n  addHost(hostNode: Node): void {\n    this.hostNodes.add(hostNode);\n\n    for (const style of this.getAllStyles()) {\n      this.addStyleToHost(hostNode, style);\n    }\n  }\n\n  removeHost(hostNode: Node): void {\n    this.hostNodes.delete(hostNode);\n  }\n\n  private getAllStyles(): IterableIterator<string> {\n    return this.styleRef.keys();\n  }\n\n  private onStyleAdded(style: string): void {\n    for (const host of this.hostNodes) {\n      this.addStyleToHost(host, style);\n    }\n  }\n\n  private onStyleRemoved(style: string): void {\n    const styleRef = this.styleRef;\n    styleRef.get(style)?.elements?.forEach((node) => node.remove());\n    styleRef.delete(style);\n  }\n\n  private collectServerRenderedStyles(): Map<string, HTMLStyleElement>|null {\n    const styles = this.doc.head?.querySelectorAll<HTMLStyleElement>(\n        `style[${APP_ID_ATTRIBUTE_NAME}=\"${this.appId}\"]`);\n\n    if (styles?.length) {\n      const styleMap = new Map<string, HTMLStyleElement>();\n\n      styles.forEach((style) => {\n        if (style.textContent != null) {\n          styleMap.set(style.textContent, style);\n        }\n      });\n\n      return styleMap;\n    }\n\n    return null;\n  }\n\n  private changeUsageCount(style: string, delta: number): number {\n    const map = this.styleRef;\n    if (map.has(style)) {\n      const styleRefValue = map.get(style)!;\n      styleRefValue.usage += delta;\n\n      return styleRefValue.usage;\n    }\n\n    map.set(style, {usage: delta, elements: []});\n    return delta;\n  }\n\n  private getStyleElement(host: Node, style: string): HTMLStyleElement {\n    const styleNodesInDOM = this.styleNodesInDOM;\n    const styleEl = styleNodesInDOM?.get(style);\n    if (styleEl?.parentNode === host) {\n      // `styleNodesInDOM` cannot be undefined due to the above `styleNodesInDOM?.get`.\n      styleNodesInDOM!.delete(style);\n\n      styleEl.removeAttribute(APP_ID_ATTRIBUTE_NAME);\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // This attribute is solely used for debugging purposes.\n        styleEl.setAttribute('ng-style-reused', '');\n      }\n\n      return styleEl;\n    } else {\n      const styleEl = this.doc.createElement('style');\n\n      if (this.nonce) {\n        styleEl.setAttribute('nonce', this.nonce);\n      }\n\n      styleEl.textContent = style;\n\n      if (this.platformIsServer) {\n        styleEl.setAttribute(APP_ID_ATTRIBUTE_NAME, this.appId);\n      }\n\n      return styleEl;\n    }\n  }\n\n  private addStyleToHost(host: Node, style: string): void {\n    const styleEl = this.getStyleElement(host, style);\n\n    host.appendChild(styleEl);\n\n    const styleRef = this.styleRef;\n    const styleElRef = styleRef.get(style)?.elements;\n    if (styleElRef) {\n      styleElRef.push(styleEl);\n    } else {\n      styleRef.set(style, {elements: [styleEl], usage: 1});\n    }\n  }\n\n  private resetHostNodes(): void {\n    const hostNodes = this.hostNodes;\n    hostNodes.clear();\n    // Re-add the head element back since this is the default host.\n    hostNodes.add(this.doc.head);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, isPlatformServer, ɵgetDOM as getDOM} from '@angular/common';\nimport {APP_ID, CSP_NONCE, Inject, Injectable, InjectionToken, NgZone, OnDestroy, PLATFORM_ID, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2, ViewEncapsulation} from '@angular/core';\n\nimport {EventManager} from './events/event_manager';\nimport {SharedStylesHost} from './shared_styles_host';\n\nexport const NAMESPACE_URIS: {[ns: string]: string} = {\n  'svg': 'http://www.w3.org/2000/svg',\n  'xhtml': 'http://www.w3.org/1999/xhtml',\n  'xlink': 'http://www.w3.org/1999/xlink',\n  'xml': 'http://www.w3.org/XML/1998/namespace',\n  'xmlns': 'http://www.w3.org/2000/xmlns/',\n  'math': 'http://www.w3.org/1998/MathML/',\n};\n\nconst COMPONENT_REGEX = /%COMP%/g;\n\nexport const COMPONENT_VARIABLE = '%COMP%';\nexport const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nexport const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n\n/**\n * The default value for the `REMOVE_STYLES_ON_COMPONENT_DESTROY` DI token.\n */\nconst REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT = false;\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that indicates whether styles\n * of destroyed components should be removed from DOM.\n *\n * By default, the value is set to `false`. This will be changed in the next major version.\n * @publicApi\n */\nexport const REMOVE_STYLES_ON_COMPONENT_DESTROY =\n    new InjectionToken<boolean>('RemoveStylesOnCompDestory', {\n      providedIn: 'root',\n      factory: () => REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT,\n    });\n\nexport function shimContentAttribute(componentShortId: string): string {\n  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function shimHostAttribute(componentShortId: string): string {\n  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function shimStylesContent(compId: string, styles: string[]): string[] {\n  return styles.map(s => s.replace(COMPONENT_REGEX, compId));\n}\n\n@Injectable()\nexport class DomRendererFactory2 implements RendererFactory2, OnDestroy {\n  private readonly rendererByCompId =\n      new Map<string, EmulatedEncapsulationDomRenderer2|NoneEncapsulationDomRenderer>();\n  private readonly defaultRenderer: Renderer2;\n  private readonly platformIsServer: boolean;\n\n  constructor(\n      private readonly eventManager: EventManager,\n      private readonly sharedStylesHost: SharedStylesHost,\n      @Inject(APP_ID) private readonly appId: string,\n      @Inject(REMOVE_STYLES_ON_COMPONENT_DESTROY) private removeStylesOnCompDestory: boolean,\n      @Inject(DOCUMENT) private readonly doc: Document,\n      @Inject(PLATFORM_ID) readonly platformId: Object,\n      readonly ngZone: NgZone,\n      @Inject(CSP_NONCE) private readonly nonce: string|null = null,\n  ) {\n    this.platformIsServer = isPlatformServer(platformId);\n    this.defaultRenderer =\n        new DefaultDomRenderer2(eventManager, doc, ngZone, this.platformIsServer);\n  }\n\n  createRenderer(element: any, type: RendererType2|null): Renderer2 {\n    if (!element || !type) {\n      return this.defaultRenderer;\n    }\n\n    if (this.platformIsServer && type.encapsulation === ViewEncapsulation.ShadowDom) {\n      // Domino does not support shadow DOM.\n      type = {...type, encapsulation: ViewEncapsulation.Emulated};\n    }\n\n    const renderer = this.getOrCreateRenderer(element, type);\n    // Renderers have different logic due to different encapsulation behaviours.\n    // Ex: for emulated, an attribute is added to the element.\n    if (renderer instanceof EmulatedEncapsulationDomRenderer2) {\n      renderer.applyToHost(element);\n    } else if (renderer instanceof NoneEncapsulationDomRenderer) {\n      renderer.applyStyles();\n    }\n\n    return renderer;\n  }\n\n  private getOrCreateRenderer(element: any, type: RendererType2): Renderer2 {\n    const rendererByCompId = this.rendererByCompId;\n    let renderer = rendererByCompId.get(type.id);\n\n    if (!renderer) {\n      const doc = this.doc;\n      const ngZone = this.ngZone;\n      const eventManager = this.eventManager;\n      const sharedStylesHost = this.sharedStylesHost;\n      const removeStylesOnCompDestory = this.removeStylesOnCompDestory;\n      const platformIsServer = this.platformIsServer;\n\n      switch (type.encapsulation) {\n        case ViewEncapsulation.Emulated:\n          renderer = new EmulatedEncapsulationDomRenderer2(\n              eventManager, sharedStylesHost, type, this.appId, removeStylesOnCompDestory, doc,\n              ngZone, platformIsServer);\n          break;\n        case ViewEncapsulation.ShadowDom:\n          return new ShadowDomRenderer(\n              eventManager, sharedStylesHost, element, type, doc, ngZone, this.nonce,\n              platformIsServer);\n        default:\n          renderer = new NoneEncapsulationDomRenderer(\n              eventManager, sharedStylesHost, type, removeStylesOnCompDestory, doc, ngZone,\n              platformIsServer);\n          break;\n      }\n\n      renderer.onDestroy = () => rendererByCompId.delete(type.id);\n      rendererByCompId.set(type.id, renderer);\n    }\n\n    return renderer;\n  }\n\n  ngOnDestroy() {\n    this.rendererByCompId.clear();\n  }\n}\n\nclass DefaultDomRenderer2 implements Renderer2 {\n  data: {[key: string]: any} = Object.create(null);\n\n  constructor(\n      private readonly eventManager: EventManager, private readonly doc: Document,\n      private readonly ngZone: NgZone, private readonly platformIsServer: boolean) {}\n\n  destroy(): void {}\n\n  destroyNode = null;\n\n  createElement(name: string, namespace?: string): any {\n    if (namespace) {\n      // TODO: `|| namespace` was added in\n      // https://github.com/angular/angular/commit/2b9cc8503d48173492c29f5a271b61126104fbdb to\n      // support how Ivy passed around the namespace URI rather than short name at the time. It did\n      // not, however extend the support to other parts of the system (setAttribute, setAttribute,\n      // and the ServerRenderer). We should decide what exactly the semantics for dealing with\n      // namespaces should be and make it consistent.\n      // Related issues:\n      // https://github.com/angular/angular/issues/44028\n      // https://github.com/angular/angular/issues/44883\n      return this.doc.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n    }\n\n    return this.doc.createElement(name);\n  }\n\n  createComment(value: string): any {\n    return this.doc.createComment(value);\n  }\n\n  createText(value: string): any {\n    return this.doc.createTextNode(value);\n  }\n\n  appendChild(parent: any, newChild: any): void {\n    const targetParent = isTemplateNode(parent) ? parent.content : parent;\n    targetParent.appendChild(newChild);\n  }\n\n  insertBefore(parent: any, newChild: any, refChild: any): void {\n    if (parent) {\n      const targetParent = isTemplateNode(parent) ? parent.content : parent;\n      targetParent.insertBefore(newChild, refChild);\n    }\n  }\n\n  removeChild(parent: any, oldChild: any): void {\n    if (parent) {\n      parent.removeChild(oldChild);\n    }\n  }\n\n  selectRootElement(selectorOrNode: string|any, preserveContent?: boolean): any {\n    let el: any = typeof selectorOrNode === 'string' ? this.doc.querySelector(selectorOrNode) :\n                                                       selectorOrNode;\n    if (!el) {\n      throw new Error(`The selector \"${selectorOrNode}\" did not match any elements`);\n    }\n    if (!preserveContent) {\n      el.textContent = '';\n    }\n    return el;\n  }\n\n  parentNode(node: any): any {\n    return node.parentNode;\n  }\n\n  nextSibling(node: any): any {\n    return node.nextSibling;\n  }\n\n  setAttribute(el: any, name: string, value: string, namespace?: string): void {\n    if (namespace) {\n      name = namespace + ':' + name;\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.setAttributeNS(namespaceUri, name, value);\n      } else {\n        el.setAttribute(name, value);\n      }\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n\n  removeAttribute(el: any, name: string, namespace?: string): void {\n    if (namespace) {\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.removeAttributeNS(namespaceUri, name);\n      } else {\n        el.removeAttribute(`${namespace}:${name}`);\n      }\n    } else {\n      el.removeAttribute(name);\n    }\n  }\n\n  addClass(el: any, name: string): void {\n    el.classList.add(name);\n  }\n\n  removeClass(el: any, name: string): void {\n    el.classList.remove(name);\n  }\n\n  setStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void {\n    if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {\n      el.style.setProperty(style, value, flags & RendererStyleFlags2.Important ? 'important' : '');\n    } else {\n      el.style[style] = value;\n    }\n  }\n\n  removeStyle(el: any, style: string, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      // removeProperty has no effect when used on camelCased properties.\n      el.style.removeProperty(style);\n    } else {\n      el.style[style] = '';\n    }\n  }\n\n  setProperty(el: any, name: string, value: any): void {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && checkNoSyntheticProp(name, 'property');\n    el[name] = value;\n  }\n\n  setValue(node: any, value: string): void {\n    node.nodeValue = value;\n  }\n\n  listen(target: 'window'|'document'|'body'|any, event: string, callback: (event: any) => boolean):\n      () => void {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && checkNoSyntheticProp(event, 'listener');\n    if (typeof target === 'string') {\n      target = getDOM().getGlobalEventTarget(this.doc, target);\n      if (!target) {\n        throw new Error(`Unsupported event target ${target} for event ${event}`);\n      }\n    }\n\n    return this.eventManager.addEventListener(\n               target, event, this.decoratePreventDefault(callback)) as VoidFunction;\n  }\n\n  private decoratePreventDefault(eventHandler: Function): Function {\n    // `DebugNode.triggerEventHandler` needs to know if the listener was created with\n    // decoratePreventDefault or is a listener added outside the Angular context so it can handle\n    // the two differently. In the first case, the special '__ngUnwrap__' token is passed to the\n    // unwrap the listener (see below).\n    return (event: any) => {\n      // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function\n      // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The\n      // debug_node can inspect the listener toString contents for the existence of this special\n      // token. Because the token is a string literal, it is ensured to not be modified by compiled\n      // code.\n      if (event === '__ngUnwrap__') {\n        return eventHandler;\n      }\n\n      // Run the event handler inside the ngZone because event handlers are not patched\n      // by Zone on the server. This is required only for tests.\n      const allowDefaultBehavior = this.platformIsServer ?\n          this.ngZone.runGuarded(() => eventHandler(event)) :\n          eventHandler(event);\n      if (allowDefaultBehavior === false) {\n        event.preventDefault();\n        event.returnValue = false;\n      }\n\n      return undefined;\n    };\n  }\n}\n\nconst AT_CHARCODE = (() => '@'.charCodeAt(0))();\nfunction checkNoSyntheticProp(name: string, nameKind: string) {\n  if (name.charCodeAt(0) === AT_CHARCODE) {\n    throw new Error(`Unexpected synthetic ${nameKind} ${name} found. Please make sure that:\n  - Either \\`BrowserAnimationsModule\\` or \\`NoopAnimationsModule\\` are imported in your application.\n  - There is corresponding configuration for the animation named \\`${\n        name}\\` defined in the \\`animations\\` field of the \\`@Component\\` decorator (see https://angular.io/api/core/Component#animations).`);\n  }\n}\n\n\nfunction isTemplateNode(node: any): node is HTMLTemplateElement {\n  return node.tagName === 'TEMPLATE' && node.content !== undefined;\n}\n\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n  private shadowRoot: any;\n\n  constructor(\n      eventManager: EventManager,\n      private sharedStylesHost: SharedStylesHost,\n      private hostEl: any,\n      component: RendererType2,\n      doc: Document,\n      ngZone: NgZone,\n      nonce: string|null,\n      platformIsServer: boolean,\n  ) {\n    super(eventManager, doc, ngZone, platformIsServer);\n    this.shadowRoot = (hostEl as any).attachShadow({mode: 'open'});\n\n    this.sharedStylesHost.addHost(this.shadowRoot);\n    const styles = shimStylesContent(component.id, component.styles);\n\n    for (const style of styles) {\n      const styleEl = document.createElement('style');\n\n      if (nonce) {\n        styleEl.setAttribute('nonce', nonce);\n      }\n\n      styleEl.textContent = style;\n      this.shadowRoot.appendChild(styleEl);\n    }\n  }\n\n  private nodeOrShadowRoot(node: any): any {\n    return node === this.hostEl ? this.shadowRoot : node;\n  }\n\n  override appendChild(parent: any, newChild: any): void {\n    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n  }\n  override insertBefore(parent: any, newChild: any, refChild: any): void {\n    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n  }\n  override removeChild(parent: any, oldChild: any): void {\n    return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\n  }\n  override parentNode(node: any): any {\n    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n  }\n\n  override destroy() {\n    this.sharedStylesHost.removeHost(this.shadowRoot);\n  }\n}\n\nclass NoneEncapsulationDomRenderer extends DefaultDomRenderer2 {\n  private readonly styles: string[];\n  private rendererUsageCount = 0;\n  onDestroy: VoidFunction|undefined;\n\n  constructor(\n      eventManager: EventManager,\n      private readonly sharedStylesHost: SharedStylesHost,\n      component: RendererType2,\n      private removeStylesOnCompDestory: boolean,\n      doc: Document,\n      ngZone: NgZone,\n      platformIsServer: boolean,\n      compId?: string,\n  ) {\n    super(eventManager, doc, ngZone, platformIsServer);\n    this.styles = compId ? shimStylesContent(compId, component.styles) : component.styles;\n  }\n\n  applyStyles(): void {\n    this.sharedStylesHost.addStyles(this.styles);\n    this.rendererUsageCount++;\n  }\n\n  override destroy(): void {\n    if (!this.removeStylesOnCompDestory) {\n      return;\n    }\n\n    this.sharedStylesHost.removeStyles(this.styles);\n    this.rendererUsageCount--;\n    if (this.rendererUsageCount === 0) {\n      this.onDestroy?.();\n    }\n  }\n}\n\nclass EmulatedEncapsulationDomRenderer2 extends NoneEncapsulationDomRenderer {\n  private contentAttr: string;\n  private hostAttr: string;\n\n  constructor(\n      eventManager: EventManager, sharedStylesHost: SharedStylesHost, component: RendererType2,\n      appId: string, removeStylesOnCompDestory: boolean, doc: Document, ngZone: NgZone,\n      platformIsServer: boolean) {\n    const compId = appId + '-' + component.id;\n    super(\n        eventManager, sharedStylesHost, component, removeStylesOnCompDestory, doc, ngZone,\n        platformIsServer, compId);\n    this.contentAttr = shimContentAttribute(compId);\n    this.hostAttr = shimHostAttribute(compId);\n  }\n\n  applyToHost(element: any): void {\n    this.applyStyles();\n    this.setAttribute(element, this.hostAttr, '');\n  }\n\n  override createElement(parent: any, name: string): Element {\n    const el = super.createElement(parent, name);\n    super.setAttribute(el, this.contentAttr, '');\n    return el;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\nimport {EventManagerPlugin} from './event_manager';\n\n@Injectable()\nexport class DomEventsPlugin extends EventManagerPlugin {\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  // This plugin should come last in the list of plugins, because it accepts all\n  // events.\n  override supports(eventName: string): boolean {\n    return true;\n  }\n\n  override addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    element.addEventListener(eventName, handler as EventListener, false);\n    return () => this.removeEventListener(element, eventName, handler as EventListener);\n  }\n\n  removeEventListener(target: any, eventName: string, callback: Function): void {\n    return target.removeEventListener(eventName, callback as EventListener);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\n\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Defines supported modifiers for key events.\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\n\n// The following values are here for cross-browser compatibility and to match the W3C standard\n// cf https://www.w3.org/TR/DOM-Level-3-Events-key/\nconst _keyMap: {[k: string]: string} = {\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS'\n};\n\n/**\n * Retrieves modifiers from key-event objects.\n */\nconst MODIFIER_KEY_GETTERS: {[key: string]: (event: KeyboardEvent) => boolean} = {\n  'alt': (event: KeyboardEvent) => event.altKey,\n  'control': (event: KeyboardEvent) => event.ctrlKey,\n  'meta': (event: KeyboardEvent) => event.metaKey,\n  'shift': (event: KeyboardEvent) => event.shiftKey\n};\n\n/**\n * @publicApi\n * A browser plug-in that provides support for handling of key events in Angular.\n */\n@Injectable()\nexport class KeyEventsPlugin extends EventManagerPlugin {\n  /**\n   * Initializes an instance of the browser plug-in.\n   * @param doc The document in which key events will be detected.\n   */\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  /**\n   * Reports whether a named key event is supported.\n   * @param eventName The event name to query.\n   * @return True if the named key event is supported.\n   */\n  override supports(eventName: string): boolean {\n    return KeyEventsPlugin.parseEventName(eventName) != null;\n  }\n\n  /**\n   * Registers a handler for a specific element and key event.\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the key event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns The key event that was registered.\n   */\n  override addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const parsedEvent = KeyEventsPlugin.parseEventName(eventName)!;\n\n    const outsideHandler =\n        KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n\n    return this.manager.getZone().runOutsideAngular(() => {\n      return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n    });\n  }\n\n  /**\n   * Parses the user provided full keyboard event definition and normalizes it for\n   * later internal use. It ensures the string is all lowercase, converts special\n   * characters to a standard spelling, and orders all the values consistently.\n   *\n   * @param eventName The name of the key event to listen for.\n   * @returns an object with the full, normalized string, and the dom event name\n   * or null in the case when the event doesn't match a keyboard event.\n   */\n  static parseEventName(eventName: string): {fullKey: string, domEventName: string}|null {\n    const parts: string[] = eventName.toLowerCase().split('.');\n\n    const domEventName = parts.shift();\n    if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n\n    const key = KeyEventsPlugin._normalizeKey(parts.pop()!);\n\n    let fullKey = '';\n    let codeIX = parts.indexOf('code');\n    if (codeIX > -1) {\n      parts.splice(codeIX, 1);\n      fullKey = 'code.';\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      const index: number = parts.indexOf(modifierName);\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n\n    // NOTE: Please don't rewrite this as so, as it will break JSCompiler property renaming.\n    //       The code must remain in the `result['domEventName']` form.\n    // return {domEventName, fullKey};\n    const result: {fullKey: string, domEventName: string} = {} as any;\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n\n  /**\n   * Determines whether the actual keys pressed match the configured key code string.\n   * The `fullKeyCode` event is normalized in the `parseEventName` method when the\n   * event is attached to the DOM during the `addEventListener` call. This is unseen\n   * by the end user and is normalized for internal consistency and parsing.\n   *\n   * @param event The keyboard event.\n   * @param fullKeyCode The normalized user defined expected key event string\n   * @returns boolean.\n   */\n  static matchEventFullKeyCode(event: KeyboardEvent, fullKeyCode: string): boolean {\n    let keycode = _keyMap[event.key] || event.key;\n    let key = '';\n    if (fullKeyCode.indexOf('code.') > -1) {\n      keycode = event.code;\n      key = 'code.';\n    }\n    // the keycode could be unidentified so we have to check here\n    if (keycode == null || !keycode) return false;\n    keycode = keycode.toLowerCase();\n    if (keycode === ' ') {\n      keycode = 'space';  // for readability\n    } else if (keycode === '.') {\n      keycode = 'dot';  // because '.' is used as a separator in event names\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      if (modifierName !== keycode) {\n        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n        if (modifierGetter(event)) {\n          key += modifierName + '.';\n        }\n      }\n    });\n    key += keycode;\n    return key === fullKeyCode;\n  }\n\n  /**\n   * Configures a handler callback for a key event.\n   * @param fullKey The event name that combines all simultaneous keystrokes.\n   * @param handler The function that responds to the key event.\n   * @param zone The zone in which the event occurred.\n   * @returns A callback function.\n   */\n  static eventCallback(fullKey: string, handler: Function, zone: NgZone): Function {\n    return (event: KeyboardEvent) => {\n      if (KeyEventsPlugin.matchEventFullKeyCode(event, fullKey)) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n\n  /** @internal */\n  static _normalizeKey(keyName: string): string {\n    // TODO: switch to a Map if the mapping grows too much\n    switch (keyName) {\n      case 'esc':\n        return 'escape';\n      default:\n        return keyName;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule, DOCUMENT, XhrFactory, ɵPLATFORM_BROWSER_ID as PLATFORM_BROWSER_ID} from '@angular/common';\nimport {APP_ID, ApplicationConfig as ApplicationConfigFromCore, ApplicationModule, ApplicationRef, createPlatformFactory, ErrorHandler, Inject, InjectionToken, ModuleWithProviders, NgModule, NgZone, Optional, PLATFORM_ID, PLATFORM_INITIALIZER, platformCore, PlatformRef, Provider, RendererFactory2, SkipSelf, StaticProvider, Testability, TestabilityRegistry, Type, ɵINJECTOR_SCOPE as INJECTOR_SCOPE, ɵinternalCreateApplication as internalCreateApplication, ɵsetDocument, ɵTESTABILITY as TESTABILITY, ɵTESTABILITY_GETTER as TESTABILITY_GETTER} from '@angular/core';\n\nimport {BrowserDomAdapter} from './browser/browser_adapter';\nimport {BrowserGetTestability} from './browser/testability';\nimport {BrowserXhr} from './browser/xhr';\nimport {DomRendererFactory2} from './dom/dom_renderer';\nimport {DomEventsPlugin} from './dom/events/dom_events';\nimport {EVENT_MANAGER_PLUGINS, EventManager} from './dom/events/event_manager';\nimport {KeyEventsPlugin} from './dom/events/key_events';\nimport {SharedStylesHost} from './dom/shared_styles_host';\n\n\n/**\n * Set of config options available during the application bootstrap operation.\n *\n * @publicApi\n *\n * @deprecated\n * `ApplicationConfig` has moved, please import `ApplicationConfig` from `@angular/core` instead.\n */\n// The below is a workaround to add a deprecated message.\ntype ApplicationConfig = ApplicationConfigFromCore;\nexport {ApplicationConfig};\n\n/**\n * Bootstraps an instance of an Angular application and renders a standalone component as the\n * application's root component. More information about standalone components can be found in [this\n * guide](guide/standalone-components).\n *\n * @usageNotes\n * The root component passed into this function *must* be a standalone one (should have the\n * `standalone: true` flag in the `@Component` decorator config).\n *\n * ```typescript\n * @Component({\n *   standalone: true,\n *   template: 'Hello world!'\n * })\n * class RootComponent {}\n *\n * const appRef: ApplicationRef = await bootstrapApplication(RootComponent);\n * ```\n *\n * You can add the list of providers that should be available in the application injector by\n * specifying the `providers` field in an object passed as the second argument:\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     {provide: BACKEND_URL, useValue: 'https://yourdomain.com/api'}\n *   ]\n * });\n * ```\n *\n * The `importProvidersFrom` helper method can be used to collect all providers from any\n * existing NgModule (and transitively from all NgModules that it imports):\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(SomeNgModule)\n *   ]\n * });\n * ```\n *\n * Note: the `bootstrapApplication` method doesn't include [Testability](api/core/Testability) by\n * default. You can add [Testability](api/core/Testability) by getting the list of necessary\n * providers using `provideProtractorTestingSupport()` function and adding them into the `providers`\n * array, for example:\n *\n * ```typescript\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\n *\n * await bootstrapApplication(RootComponent, {providers: [provideProtractorTestingSupport()]});\n * ```\n *\n * @param rootComponent A reference to a standalone component that should be rendered.\n * @param options Extra configuration for the bootstrap operation, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nexport function bootstrapApplication(\n    rootComponent: Type<unknown>, options?: ApplicationConfig): Promise<ApplicationRef> {\n  return internalCreateApplication({rootComponent, ...createProvidersConfig(options)});\n}\n\n/**\n * Create an instance of an Angular application without bootstrapping any components. This is useful\n * for the situation where one wants to decouple application environment creation (a platform and\n * associated injectors) from rendering components on a screen. Components can be subsequently\n * bootstrapped on the returned `ApplicationRef`.\n *\n * @param options Extra configuration for the application environment, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nexport function createApplication(options?: ApplicationConfig) {\n  return internalCreateApplication(createProvidersConfig(options));\n}\n\nfunction createProvidersConfig(options?: ApplicationConfig) {\n  return {\n    appProviders: [\n      ...BROWSER_MODULE_PROVIDERS,\n      ...(options?.providers ?? []),\n    ],\n    platformProviders: INTERNAL_BROWSER_PLATFORM_PROVIDERS\n  };\n}\n\n/**\n * Returns a set of providers required to setup [Testability](api/core/Testability) for an\n * application bootstrapped using the `bootstrapApplication` function. The set of providers is\n * needed to support testing an application with Protractor (which relies on the Testability APIs\n * to be present).\n *\n * @returns An array of providers required to setup Testability for an application and make it\n *     available for testing using Protractor.\n *\n * @publicApi\n */\nexport function provideProtractorTestingSupport(): Provider[] {\n  // Return a copy to prevent changes to the original array in case any in-place\n  // alterations are performed to the `provideProtractorTestingSupport` call results in app\n  // code.\n  return [...TESTABILITY_PROVIDERS];\n}\n\nexport function initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n}\n\nexport function errorHandler(): ErrorHandler {\n  return new ErrorHandler();\n}\n\nexport function _document(): any {\n  // Tell ivy about the global document\n  ɵsetDocument(document);\n  return document;\n}\n\nexport const INTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[] = [\n  {provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID},\n  {provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true},\n  {provide: DOCUMENT, useFactory: _document, deps: []},\n];\n\n/**\n * A factory function that returns a `PlatformRef` instance associated with browser service\n * providers.\n *\n * @publicApi\n */\nexport const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef =\n    createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n\n/**\n * Internal marker to signal whether providers from the `BrowserModule` are already present in DI.\n * This is needed to avoid loading `BrowserModule` providers twice. We can't rely on the\n * `BrowserModule` presence itself, since the standalone-based bootstrap just imports\n * `BrowserModule` providers without referencing the module itself.\n */\nconst BROWSER_MODULE_PROVIDERS_MARKER = new InjectionToken(\n    (typeof ngDevMode === 'undefined' || ngDevMode) ? 'BrowserModule Providers Marker' : '');\n\nconst TESTABILITY_PROVIDERS = [\n  {\n    provide: TESTABILITY_GETTER,\n    useClass: BrowserGetTestability,\n    deps: [],\n  },\n  {\n    provide: TESTABILITY,\n    useClass: Testability,\n    deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER]\n  },\n  {\n    provide: Testability,  // Also provide as `Testability` for backwards-compatibility.\n    useClass: Testability,\n    deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER]\n  }\n];\n\nconst BROWSER_MODULE_PROVIDERS: Provider[] = [\n  {provide: INJECTOR_SCOPE, useValue: 'root'},\n  {provide: ErrorHandler, useFactory: errorHandler, deps: []}, {\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: DomEventsPlugin,\n    multi: true,\n    deps: [DOCUMENT, NgZone, PLATFORM_ID]\n  },\n  {provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT]},\n  DomRendererFactory2, SharedStylesHost, EventManager,\n  {provide: RendererFactory2, useExisting: DomRendererFactory2},\n  {provide: XhrFactory, useClass: BrowserXhr, deps: []},\n  (typeof ngDevMode === 'undefined' || ngDevMode) ?\n      {provide: BROWSER_MODULE_PROVIDERS_MARKER, useValue: true} :\n      []\n];\n\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],\n  exports: [CommonModule, ApplicationModule],\n})\nexport class BrowserModule {\n  constructor(@Optional() @SkipSelf() @Inject(BROWSER_MODULE_PROVIDERS_MARKER)\n              providersAlreadyPresent: boolean|null) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && providersAlreadyPresent) {\n      throw new Error(\n          `Providers from the \\`BrowserModule\\` have already been loaded. If you need access ` +\n          `to common directives such as NgIf and NgFor, import the \\`CommonModule\\` instead.`);\n    }\n  }\n\n  /**\n   * Configures a browser-based app to transition from a server-rendered app, if\n   * one is present on the page.\n   *\n   * @param params An object containing an identifier for the app to transition.\n   * The ID must match between the client and server versions of the app.\n   * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n   *\n   * @deprecated Use {@link APP_ID} instead to set the application ID.\n   */\n  static withServerTransition(params: {appId: string}): ModuleWithProviders<BrowserModule> {\n    return {\n      ngModule: BrowserModule,\n      providers: [\n        {provide: APP_ID, useValue: params.appId},\n      ],\n    };\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵDomAdapter as DomAdapter, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, ɵɵinject} from '@angular/core';\n\n/**\n * Represents the attributes of an HTML `<meta>` element. The element itself is\n * represented by the internal `HTMLMetaElement`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see `Meta`\n *\n * @publicApi\n */\nexport type MetaDefinition = {\n  charset?: string;\n  content?: string;\n  httpEquiv?: string;\n  id?: string;\n  itemprop?: string;\n  name?: string;\n  property?: string;\n  scheme?: string;\n  url?: string;\n}&{\n  // TODO(IgorMinar): this type looks wrong\n  [prop: string]: string;\n};\n\n/**\n * Factory to create a `Meta` service instance for the current DOM document.\n */\nexport function createMeta() {\n  return new Meta(ɵɵinject(DOCUMENT));\n}\n\n/**\n * A service for managing HTML `<meta>` tags.\n *\n * Properties of the `MetaDefinition` object match the attributes of the\n * HTML `<meta>` tag. These tags define document metadata that is important for\n * things like configuring a Content Security Policy, defining browser compatibility\n * and security settings, setting HTTP Headers, defining rich content for social sharing,\n * and Search Engine Optimization (SEO).\n *\n * To identify specific `<meta>` tags in a document, use an attribute selection\n * string in the format `\"tag_attribute='value string'\"`.\n * For example, an `attrSelector` value of `\"name='description'\"` matches a tag\n * whose `name` attribute has the value `\"description\"`.\n * Selectors are used with the `querySelector()` Document method,\n * in the format `meta[{attrSelector}]`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see [Document.querySelector()](https://developer.mozilla.org/docs/Web/API/Document/querySelector)\n *\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: createMeta, deps: []})\nexport class Meta {\n  private _dom: DomAdapter;\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    this._dom = getDOM();\n  }\n  /**\n   * Retrieves or creates a specific `<meta>` tag element in the current HTML document.\n   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n   * values in the provided tag definition, and verifies that all other attribute values are equal.\n   * If an existing element is found, it is returned and is not modified in any way.\n   * @param tag The definition of a `<meta>` element to match or create.\n   * @param forceCreation True to create a new element without checking whether one already exists.\n   * @returns The existing element with the same attributes and values if found,\n   * the new element if no match is found, or `null` if the tag parameter is not defined.\n   */\n  addTag(tag: MetaDefinition, forceCreation: boolean = false): HTMLMetaElement|null {\n    if (!tag) return null;\n    return this._getOrCreateElement(tag, forceCreation);\n  }\n\n  /**\n   * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.\n   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n   * values in the provided tag definition, and verifies that all other attribute values are equal.\n   * @param tags An array of tag definitions to match or create.\n   * @param forceCreation True to create new elements without checking whether they already exist.\n   * @returns The matching elements if found, or the new elements.\n   */\n  addTags(tags: MetaDefinition[], forceCreation: boolean = false): HTMLMetaElement[] {\n    if (!tags) return [];\n    return tags.reduce((result: HTMLMetaElement[], tag: MetaDefinition) => {\n      if (tag) {\n        result.push(this._getOrCreateElement(tag, forceCreation));\n      }\n      return result;\n    }, []);\n  }\n\n  /**\n   * Retrieves a `<meta>` tag element in the current HTML document.\n   * @param attrSelector The tag attribute and value to match against, in the format\n   * `\"tag_attribute='value string'\"`.\n   * @returns The matching element, if any.\n   */\n  getTag(attrSelector: string): HTMLMetaElement|null {\n    if (!attrSelector) return null;\n    return this._doc.querySelector(`meta[${attrSelector}]`) || null;\n  }\n\n  /**\n   * Retrieves a set of `<meta>` tag elements in the current HTML document.\n   * @param attrSelector The tag attribute and value to match against, in the format\n   * `\"tag_attribute='value string'\"`.\n   * @returns The matching elements, if any.\n   */\n  getTags(attrSelector: string): HTMLMetaElement[] {\n    if (!attrSelector) return [];\n    const list /*NodeList*/ = this._doc.querySelectorAll(`meta[${attrSelector}]`);\n    return list ? [].slice.call(list) : [];\n  }\n\n  /**\n   * Modifies an existing `<meta>` tag element in the current HTML document.\n   * @param tag The tag description with which to replace the existing tag content.\n   * @param selector A tag attribute and value to match against, to identify\n   * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n   * If not supplied, matches a tag with the same `name` or `property` attribute value as the\n   * replacement tag.\n   * @return The modified element.\n   */\n  updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement|null {\n    if (!tag) return null;\n    selector = selector || this._parseSelector(tag);\n    const meta: HTMLMetaElement = this.getTag(selector)!;\n    if (meta) {\n      return this._setMetaElementAttributes(tag, meta);\n    }\n    return this._getOrCreateElement(tag, true);\n  }\n\n  /**\n   * Removes an existing `<meta>` tag element from the current HTML document.\n   * @param attrSelector A tag attribute and value to match against, to identify\n   * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n   */\n  removeTag(attrSelector: string): void {\n    this.removeTagElement(this.getTag(attrSelector)!);\n  }\n\n  /**\n   * Removes an existing `<meta>` tag element from the current HTML document.\n   * @param meta The tag definition to match against to identify an existing tag.\n   */\n  removeTagElement(meta: HTMLMetaElement): void {\n    if (meta) {\n      this._dom.remove(meta);\n    }\n  }\n\n  private _getOrCreateElement(meta: MetaDefinition, forceCreation: boolean = false):\n      HTMLMetaElement {\n    if (!forceCreation) {\n      const selector: string = this._parseSelector(meta);\n      // It's allowed to have multiple elements with the same name so it's not enough to\n      // just check that element with the same name already present on the page. We also need to\n      // check if element has tag attributes\n      const elem = this.getTags(selector).filter(elem => this._containsAttributes(meta, elem))[0];\n      if (elem !== undefined) return elem;\n    }\n    const element: HTMLMetaElement = this._dom.createElement('meta') as HTMLMetaElement;\n    this._setMetaElementAttributes(meta, element);\n    const head = this._doc.getElementsByTagName('head')[0];\n    head.appendChild(element);\n    return element;\n  }\n\n  private _setMetaElementAttributes(tag: MetaDefinition, el: HTMLMetaElement): HTMLMetaElement {\n    Object.keys(tag).forEach(\n        (prop: string) => el.setAttribute(this._getMetaKeyMap(prop), tag[prop]));\n    return el;\n  }\n\n  private _parseSelector(tag: MetaDefinition): string {\n    const attr: string = tag.name ? 'name' : 'property';\n    return `${attr}=\"${tag[attr]}\"`;\n  }\n\n  private _containsAttributes(tag: MetaDefinition, elem: HTMLMetaElement): boolean {\n    return Object.keys(tag).every(\n        (key: string) => elem.getAttribute(this._getMetaKeyMap(key)) === tag[key]);\n  }\n\n  private _getMetaKeyMap(prop: string): string {\n    return META_KEYS_MAP[prop] || prop;\n  }\n}\n\n/**\n * Mapping for MetaDefinition properties with their correct meta attribute names\n */\nconst META_KEYS_MAP: {[prop: string]: string;} = {\n  httpEquiv: 'http-equiv'\n};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, ɵɵinject} from '@angular/core';\n\n\n/**\n * Factory to create Title service.\n */\nexport function createTitle() {\n  return new Title(ɵɵinject(DOCUMENT));\n}\n\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: createTitle, deps: []})\nexport class Title {\n  constructor(@Inject(DOCUMENT) private _doc: any) {}\n  /**\n   * Get the title of the current HTML document.\n   */\n  getTitle(): string {\n    return this._doc.title;\n  }\n\n  /**\n   * Set the title of the current HTML document.\n   * @param newTitle\n   */\n  setTitle(newTitle: string) {\n    this._doc.title = newTitle || '';\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵglobal as global} from '@angular/core';\n\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\nexport function exportNgVar(name: string, value: any): void {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for angularJS (via `goog.provide('ng....')`).\n    const ng = global['ng'] = (global['ng'] as {[key: string]: any} | undefined) || {};\n    ng[name] = value;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst win = typeof window !== 'undefined' && window || <any>{};\nexport {win as window};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef, ComponentRef} from '@angular/core';\nimport {window} from './browser';\n\nexport class ChangeDetectionPerfRecord {\n  constructor(public msPerTick: number, public numTicks: number) {}\n}\n\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nexport class AngularProfiler {\n  appRef: ApplicationRef;\n\n  constructor(ref: ComponentRef<any>) {\n    this.appRef = ref.injector.get(ApplicationRef);\n  }\n\n  // tslint:disable:no-console\n  /**\n   * Exercises change detection in a loop and then prints the average amount of\n   * time in milliseconds how long a single round of change detection takes for\n   * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n   * of 500 milliseconds.\n   *\n   * Optionally, a user may pass a `config` parameter containing a map of\n   * options. Supported options are:\n   *\n   * `record` (boolean) - causes the profiler to record a CPU profile while\n   * it exercises the change detector. Example:\n   *\n   * ```\n   * ng.profiler.timeChangeDetection({record: true})\n   * ```\n   */\n  timeChangeDetection(config: any): ChangeDetectionPerfRecord {\n    const record = config && config['record'];\n    const profileName = 'Change Detection';\n    // Profiler is not available in Android browsers without dev tools opened\n    const isProfilerAvailable = window.console.profile != null;\n    if (record && isProfilerAvailable) {\n      window.console.profile(profileName);\n    }\n    const start = performanceNow();\n    let numTicks = 0;\n    while (numTicks < 5 || (performanceNow() - start) < 500) {\n      this.appRef.tick();\n      numTicks++;\n    }\n    const end = performanceNow();\n    if (record && isProfilerAvailable) {\n      window.console.profileEnd(profileName);\n    }\n    const msPerTick = (end - start) / numTicks;\n    window.console.log(`ran ${numTicks} change detection cycles`);\n    window.console.log(`${msPerTick.toFixed(2)} ms per check`);\n\n    return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n  }\n}\n\nfunction performanceNow() {\n  return window.performance && window.performance.now ? window.performance.now() :\n                                                        new Date().getTime();\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentRef} from '@angular/core';\nimport {exportNgVar} from '../../dom/util';\nimport {AngularProfiler} from './common_tools';\n\nconst PROFILER_GLOBAL_NAME = 'profiler';\n\n/**\n * Enabled Angular debug tools that are accessible via your browser's\n * developer console.\n *\n * Usage:\n *\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n *    then hit Enter.\n *\n * @publicApi\n */\nexport function enableDebugTools<T>(ref: ComponentRef<T>): ComponentRef<T> {\n  exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));\n  return ref;\n}\n\n/**\n * Disables Angular tools.\n *\n * @publicApi\n */\nexport function disableDebugTools(): void {\n  exportNgVar(PROFILER_GLOBAL_NAME, null);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {DebugElement, DebugNode, Predicate, Type} from '@angular/core';\n\n\n\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n *\n * @publicApi\n */\nexport class By {\n  /**\n   * Match all nodes.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n   */\n  static all(): Predicate<DebugNode> {\n    return () => true;\n  }\n\n  /**\n   * Match elements by the given CSS selector.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n   */\n  static css(selector: string): Predicate<DebugElement> {\n    return (debugElement) => {\n      return debugElement.nativeElement != null ?\n          elementMatches(debugElement.nativeElement, selector) :\n          false;\n    };\n  }\n\n  /**\n   * Match nodes that have the given directive present.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n   */\n  static directive(type: Type<any>): Predicate<DebugNode> {\n    return (debugNode) => debugNode.providerTokens!.indexOf(type) !== -1;\n  }\n}\n\nfunction elementMatches(n: any, selector: string): boolean {\n  if (getDOM().isElementNode(n)) {\n    return n.matches && n.matches(selector) ||\n        n.msMatchesSelector && n.msMatchesSelector(selector) ||\n        n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n  }\n\n  return false;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, InjectionToken, NgModule, Optional, Provider, ɵConsole as Console} from '@angular/core';\n\nimport {EVENT_MANAGER_PLUGINS, EventManagerPlugin} from './event_manager';\n\n\n\n/**\n * Supported HammerJS recognizer event names.\n */\nconst EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n  'doubletap': true\n};\n\n/**\n * DI token for providing [HammerJS](https://hammerjs.github.io/) support to Angular.\n * @see `HammerGestureConfig`\n *\n * @ngModule HammerModule\n * @publicApi\n */\nexport const HAMMER_GESTURE_CONFIG = new InjectionToken<HammerGestureConfig>('HammerGestureConfig');\n\n\n/**\n * Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.\n *\n * @publicApi\n */\nexport type HammerLoader = () => Promise<void>;\n\n/**\n * Injection token used to provide a {@link HammerLoader} to Angular.\n *\n * @publicApi\n */\nexport const HAMMER_LOADER = new InjectionToken<HammerLoader>('HammerLoader');\n\nexport interface HammerInstance {\n  on(eventName: string, callback?: Function): void;\n  off(eventName: string, callback?: Function): void;\n  destroy?(): void;\n}\n\n/**\n * An injectable [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n */\n@Injectable()\nexport class HammerGestureConfig {\n  /**\n   * A set of supported event names for gestures to be used in Angular.\n   * Angular supports all built-in recognizers, as listed in\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   */\n  events: string[] = [];\n\n  /**\n   * Maps gesture event names to a set of configuration options\n   * that specify overrides to the default values for specific properties.\n   *\n   * The key is a supported event name to be configured,\n   * and the options object contains a set of properties, with override values\n   * to be applied to the named recognizer event.\n   * For example, to disable recognition of the rotate event, specify\n   *  `{\"rotate\": {\"enable\": false}}`.\n   *\n   * Properties that are not present take the HammerJS default values.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   *\n   */\n  overrides: {[key: string]: Object} = {};\n\n  /**\n   * Properties whose default values can be overridden for a given event.\n   * Different sets of properties apply to different events.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   */\n  options?: {\n    cssProps?: any;\n    domEvents?: boolean;\n    enable?: boolean | ((manager: any) => boolean);\n    preset?: any[];\n    touchAction?: string;\n    recognizers?: any[];\n    inputClass?: any;\n    inputTarget?: EventTarget;\n  };\n\n  /**\n   * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n   * and attaches it to a given HTML element.\n   * @param element The element that will recognize gestures.\n   * @returns A HammerJS event-manager object.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new Hammer!(element, this.options);\n\n    mc.get('pinch').set({enable: true});\n    mc.get('rotate').set({enable: true});\n\n    for (const eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\n}\n\n/**\n * Event plugin that adds Hammer support to an application.\n *\n * @ngModule HammerModule\n */\n@Injectable()\nexport class HammerGesturesPlugin extends EventManagerPlugin {\n  private _loaderPromise: Promise<void>|null = null;\n\n  constructor(\n      @Inject(DOCUMENT) doc: any,\n      @Inject(HAMMER_GESTURE_CONFIG) private _config: HammerGestureConfig, private console: Console,\n      @Optional() @Inject(HAMMER_LOADER) private loader?: HammerLoader|null) {\n    super(doc);\n  }\n\n  override supports(eventName: string): boolean {\n    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n      return false;\n    }\n\n    if (!(window as any).Hammer && !this.loader) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        this.console.warn(\n            `The \"${eventName}\" event cannot be bound because Hammer.JS is not ` +\n            `loaded and no custom loader has been specified.`);\n      }\n      return false;\n    }\n\n    return true;\n  }\n\n  override addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n\n    // If Hammer is not present but a loader is specified, we defer adding the event listener\n    // until Hammer is loaded.\n    if (!(window as any).Hammer && this.loader) {\n      this._loaderPromise = this._loaderPromise || zone.runOutsideAngular(() => this.loader!());\n      // This `addEventListener` method returns a function to remove the added listener.\n      // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n      // than remove anything.\n      let cancelRegistration = false;\n      let deregister: Function = () => {\n        cancelRegistration = true;\n      };\n\n      zone.runOutsideAngular(\n          () => this._loaderPromise!\n                    .then(() => {\n                      // If Hammer isn't actually loaded when the custom loader resolves, give up.\n                      if (!(window as any).Hammer) {\n                        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                          this.console.warn(\n                              `The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\n                        }\n                        deregister = () => {};\n                        return;\n                      }\n\n                      if (!cancelRegistration) {\n                        // Now that Hammer is loaded and the listener is being loaded for real,\n                        // the deregistration function changes from canceling registration to\n                        // removal.\n                        deregister = this.addEventListener(element, eventName, handler);\n                      }\n                    })\n                    .catch(() => {\n                      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                        this.console.warn(\n                            `The \"${eventName}\" event cannot be bound because the custom ` +\n                            `Hammer.JS loader failed.`);\n                      }\n                      deregister = () => {};\n                    }));\n\n      // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n      // can change the behavior of `deregister` once the listener is added. Using a closure in\n      // this way allows us to avoid any additional data structures to track listener removal.\n      return () => {\n        deregister();\n      };\n    }\n\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      const mc = this._config.buildHammer(element);\n      const callback = function(eventObj: HammerInput) {\n        zone.runGuarded(function() {\n          handler(eventObj);\n        });\n      };\n      mc.on(eventName, callback);\n      return () => {\n        mc.off(eventName, callback);\n        // destroy mc to prevent memory leak\n        if (typeof mc.destroy === 'function') {\n          mc.destroy();\n        }\n      };\n    });\n  }\n\n  isCustomEvent(eventName: string): boolean {\n    return this._config.events.indexOf(eventName) > -1;\n  }\n}\n\n/**\n * Adds support for HammerJS.\n *\n * Import this module at the root of your application so that Angular can work with\n * HammerJS to detect gesture events.\n *\n * Note that applications still need to include the HammerJS script itself. This module\n * simply sets up the coordination layer between HammerJS and Angular's EventManager.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    {\n      provide: EVENT_MANAGER_PLUGINS,\n      useClass: HammerGesturesPlugin,\n      multi: true,\n      deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, Console, [new Optional(), HAMMER_LOADER]]\n    },\n    {provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: []},\n  ]\n})\nexport class HammerModule {\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {forwardRef, Inject, Injectable, Injector, Sanitizer, SecurityContext, ɵ_sanitizeHtml as _sanitizeHtml, ɵ_sanitizeUrl as _sanitizeUrl, ɵallowSanitizationBypassAndThrow as allowSanitizationBypassOrThrow, ɵbypassSanitizationTrustHtml as bypassSanitizationTrustHtml, ɵbypassSanitizationTrustResourceUrl as bypassSanitizationTrustResourceUrl, ɵbypassSanitizationTrustScript as bypassSanitizationTrustScript, ɵbypassSanitizationTrustStyle as bypassSanitizationTrustStyle, ɵbypassSanitizationTrustUrl as bypassSanitizationTrustUrl, ɵBypassType as BypassType, ɵgetSanitizationBypassType as getSanitizationBypassType, ɵunwrapSafeValue as unwrapSafeValue, ɵXSS_SECURITY_URL as XSS_SECURITY_URL} from '@angular/core';\n\nexport {SecurityContext};\n\n\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @publicApi\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @publicApi\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @publicApi\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @publicApi\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @publicApi\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @publicApi\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useExisting: forwardRef(() => DomSanitizerImpl)})\nexport abstract class DomSanitizer implements Sanitizer {\n  /**\n   * Gets a safe value from either a known safe value or a value with unknown safety.\n   *\n   * If the given value is already a `SafeValue`, this method returns the unwrapped value.\n   * If the security context is HTML and the given value is a plain string, this method\n   * sanitizes the string, removing any potentially unsafe content.\n   * For any other security context, this method throws an error if provided\n   * with a plain string.\n   */\n  abstract sanitize(context: SecurityContext, value: SafeValue|string|null): string|null;\n\n  /**\n   * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n   * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n   * leave safe HTML intact, so in most situations this method should not be used.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n\n  /**\n   * Bypass security and trust the given value to be safe style value (CSS).\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n\n  /**\n   * Bypass security and trust the given value to be safe JavaScript.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustScript(value: string): SafeScript;\n\n  /**\n   * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n   * in hyperlinks or `<img src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n\n  /**\n   * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n   * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n\nexport function domSanitizerImplFactory(injector: Injector) {\n  return new DomSanitizerImpl(injector.get(DOCUMENT));\n}\n\n@Injectable({providedIn: 'root', useFactory: domSanitizerImplFactory, deps: [Injector]})\nexport class DomSanitizerImpl extends DomSanitizer {\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n  }\n\n  override sanitize(ctx: SecurityContext, value: SafeValue|string|null): string|null {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return value as string;\n      case SecurityContext.HTML:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Html)) {\n          return unwrapSafeValue(value);\n        }\n        return _sanitizeHtml(this._doc, String(value)).toString();\n      case SecurityContext.STYLE:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Style)) {\n          return unwrapSafeValue(value);\n        }\n        return value as string;\n      case SecurityContext.SCRIPT:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Script)) {\n          return unwrapSafeValue(value);\n        }\n        throw new Error('unsafe value used in a script context');\n      case SecurityContext.URL:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Url)) {\n          return unwrapSafeValue(value);\n        }\n        return _sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (allowSanitizationBypassOrThrow(value, BypassType.ResourceUrl)) {\n          return unwrapSafeValue(value);\n        }\n        throw new Error(`unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);\n      default:\n        throw new Error(`Unexpected SecurityContext ${ctx} (see ${XSS_SECURITY_URL})`);\n    }\n  }\n\n  override bypassSecurityTrustHtml(value: string): SafeHtml {\n    return bypassSanitizationTrustHtml(value);\n  }\n  override bypassSecurityTrustStyle(value: string): SafeStyle {\n    return bypassSanitizationTrustStyle(value);\n  }\n  override bypassSecurityTrustScript(value: string): SafeScript {\n    return bypassSanitizationTrustScript(value);\n  }\n  override bypassSecurityTrustUrl(value: string): SafeUrl {\n    return bypassSanitizationTrustUrl(value);\n  }\n  override bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return bypassSanitizationTrustResourceUrl(value);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵwithHttpTransferCache as withHttpTransferCache} from '@angular/common/http';\nimport {ENVIRONMENT_INITIALIZER, EnvironmentProviders, inject, makeEnvironmentProviders, NgZone, Provider, ɵConsole as Console, ɵformatRuntimeError as formatRuntimeError, ɵwithDomHydration as withDomHydration} from '@angular/core';\n\nimport {RuntimeErrorCode} from './errors';\n\n/**\n * The list of features as an enum to uniquely type each `HydrationFeature`.\n * @see HydrationFeature\n *\n * @publicApi\n * @developerPreview\n */\nexport const enum HydrationFeatureKind {\n  NoDomReuseFeature,\n  NoHttpTransferCache\n}\n\n/**\n * Helper type to represent a Hydration feature.\n *\n * @publicApi\n * @developerPreview\n */\nexport interface HydrationFeature<FeatureKind extends HydrationFeatureKind> {\n  ɵkind: FeatureKind;\n  ɵproviders: Provider[];\n}\n\n/**\n * Helper function to create an object that represents a Hydration feature.\n */\nfunction hydrationFeature<FeatureKind extends HydrationFeatureKind>(\n    kind: FeatureKind, providers: Provider[] = []): HydrationFeature<FeatureKind> {\n  return {ɵkind: kind, ɵproviders: providers};\n}\n\n/**\n * Disables DOM nodes reuse during hydration. Effectively makes\n * Angular re-render an application from scratch on the client.\n *\n * When this option is enabled, make sure that the initial navigation\n * option is configured for the Router as `enabledBlocking` by using the\n * `withEnabledBlockingInitialNavigation` in the `provideRouter` call:\n *\n * ```\n * bootstrapApplication(RootComponent, {\n *   providers: [\n *     provideRouter(\n *       // ... other features ...\n *       withEnabledBlockingInitialNavigation()\n *     ),\n *     provideClientHydration(withNoDomReuse())\n *   ]\n * });\n * ```\n *\n * This would ensure that the application is rerendered after all async\n * operations in the Router (such as lazy-loading of components,\n * waiting for async guards and resolvers) are completed to avoid\n * clearing the DOM on the client too soon, thus causing content flicker.\n *\n * @see `provideRouter`\n * @see `withEnabledBlockingInitialNavigation`\n *\n * @publicApi\n * @developerPreview\n */\nexport function withNoDomReuse(): HydrationFeature<HydrationFeatureKind.NoDomReuseFeature> {\n  // This feature has no providers and acts as a flag that turns off\n  // non-destructive hydration (which otherwise is turned on by default).\n  return hydrationFeature(HydrationFeatureKind.NoDomReuseFeature);\n}\n\n/**\n * Disables HTTP transfer cache. Effectively causes HTTP requests to be performed twice: once on the\n * server and other one on the browser.\n *\n * @publicApi\n * @developerPreview\n */\nexport function withNoHttpTransferCache():\n    HydrationFeature<HydrationFeatureKind.NoHttpTransferCache> {\n  // This feature has no providers and acts as a flag that turns off\n  // HTTP transfer cache (which otherwise is turned on by default).\n  return hydrationFeature(HydrationFeatureKind.NoHttpTransferCache);\n}\n\n/**\n * Returns an `ENVIRONMENT_INITIALIZER` token setup with a function\n * that verifies whether compatible ZoneJS was used in an application\n * and logs a warning in a console if it's not the case.\n */\nfunction provideZoneJsCompatibilityDetector(): Provider[] {\n  return [{\n    provide: ENVIRONMENT_INITIALIZER,\n    useValue: () => {\n      const ngZone = inject(NgZone);\n      // Checking `ngZone instanceof NgZone` would be insufficient here,\n      // because custom implementations might use NgZone as a base class.\n      if (ngZone.constructor !== NgZone) {\n        const console = inject(Console);\n        const message = formatRuntimeError(\n            RuntimeErrorCode.UNSUPPORTED_ZONEJS_INSTANCE,\n            'Angular detected that hydration was enabled for an application ' +\n                'that uses a custom or a noop Zone.js implementation. ' +\n                'This is not yet a fully supported configuration.');\n        // tslint:disable-next-line:no-console\n        console.warn(message);\n      }\n    },\n    multi: true,\n  }];\n}\n\n/**\n * Sets up providers necessary to enable hydration functionality for the application.\n * By default, the function enables the recommended set of features for the optimal\n * performance for most of the applications. You can enable/disable features by\n * passing special functions (from the `HydrationFeatures` set) as arguments to the\n * `provideClientHydration` function.\n *\n * @usageNotes\n *\n * Basic example of how you can enable hydration in your application when\n * `bootstrapApplication` function is used:\n * ```\n * bootstrapApplication(AppComponent, {\n *   providers: [provideClientHydration()]\n * });\n * ```\n *\n * Alternatively if you are using NgModules, you would add `provideClientHydration`\n * to your root app module's provider list.\n * ```\n * @NgModule({\n *   declarations: [RootCmp],\n *   bootstrap: [RootCmp],\n *   providers: [provideClientHydration()],\n * })\n * export class AppModule {}\n * ```\n *\n * @see `withNoDomReuse`\n * @see `withNoHttpTransferCache`\n *\n * @param features Optional features to configure additional router behaviors.\n * @returns A set of providers to enable hydration.\n *\n * @publicApi\n * @developerPreview\n */\nexport function provideClientHydration(...features: HydrationFeature<HydrationFeatureKind>[]):\n    EnvironmentProviders {\n  const providers: Provider[] = [];\n  const featuresKind = new Set<HydrationFeatureKind>();\n\n  for (const {ɵproviders, ɵkind} of features) {\n    featuresKind.add(ɵkind);\n\n    if (ɵproviders.length) {\n      providers.push(ɵproviders);\n    }\n  }\n\n  return makeEnvironmentProviders([\n    (typeof ngDevMode !== 'undefined' && ngDevMode) ? provideZoneJsCompatibilityDetector() : [],\n    (featuresKind.has(HydrationFeatureKind.NoDomReuseFeature) ? [] : withDomHydration()),\n    (featuresKind.has(HydrationFeatureKind.NoHttpTransferCache) ? [] : withHttpTransferCache()),\n    providers,\n  ]);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the platform-browser package.\n */\n\nimport {Version} from '@angular/core';\n\n/**\n * @publicApi\n */\nexport const VERSION = new Version('16.0.0');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Re-export TransferState to the public API of the `platform-browser` for backwards-compatibility.\nimport {makeStateKey as makeStateKeyFromCore, StateKey as StateKeyFromCore, TransferState as TransferStateFromCore} from '@angular/core';\n\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n * @deprecated `makeStateKey` has moved, please import `makeStateKey` from `@angular/core` instead.\n */\n// The below is a workaround to add a deprecated message.\nexport const makeStateKey = makeStateKeyFromCore;\n\n/**\n *\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * The `TransferState` is available as an injectable token.\n * On the client, just inject this token using DI and use it, it will be lazily initialized.\n * On the server it's already included if `renderApplication` function is used. Otherwise, import\n * the `ServerTransferStateModule` module to make the `TransferState` available.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialized in a\n * non-lossy manner.\n *\n * @publicApi\n *\n * @deprecated `TransferState` has moved, please import `TransferState` from `@angular/core`\n *     instead.\n */\n// The below is a workaround to add a deprecated message.\nexport type TransferState = TransferStateFromCore;\n// The below type is needed for G3 due to JSC_CONFORMANCE_VIOLATION.\nexport const TransferState: {new (): TransferStateFromCore} = TransferStateFromCore;\n\n/**\n * A type-safe key to use with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n * @publicApi\n *\n * @deprecated `StateKey` has moved, please import `StateKey` from `@angular/core` instead.\n */\n// The below is a workaround to add a deprecated message.\nexport type StateKey<T> = StateKeyFromCore<T>;\n\nexport {ApplicationConfig, bootstrapApplication, BrowserModule, createApplication, platformBrowser, provideProtractorTestingSupport} from './browser';\nexport {Meta, MetaDefinition} from './browser/meta';\nexport {Title} from './browser/title';\nexport {disableDebugTools, enableDebugTools} from './browser/tools/tools';\nexport {By} from './dom/debug/by';\nexport {REMOVE_STYLES_ON_COMPONENT_DESTROY} from './dom/dom_renderer';\nexport {EVENT_MANAGER_PLUGINS, EventManager} from './dom/events/event_manager';\nexport {HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerLoader, HammerModule} from './dom/events/hammer_gestures';\nexport {DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle, SafeUrl, SafeValue} from './security/dom_sanitization_service';\nexport {HydrationFeature, provideClientHydration, HydrationFeatureKind, withNoDomReuse, withNoHttpTransferCache} from './hydration';\n\nexport * from './private_export';\nexport {VERSION} from './version';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/platform-browser';\n// This file only reexports content of the `src` folder. Keep it that way.\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["value", "map", "base", "headers", "params", "HttpEventType", "first", "req", "i1.HttpHandler", "i1.HttpBackend", "document", "parseCookieValue", "HttpFeatureKind", "ENABLED_SSR_FEATURES", "InitialRenderPendingTasks", "DomAdapter", "setRootDomAdapter", "parseCookieValue", "global", "getDOM", "plugin", "map", "styleEl", "i1.EventManager", "i2.SharedStylesHost", "internalCreateApplication", "PLATFORM_BROWSER_ID", "TESTABILITY_GETTER", "TESTABILITY", "INJECTOR_SCOPE", "elem", "window", "Console", "allowSanitizationBypassOrThrow", "unwrapSafeValue", "_sanitizeHtml", "_sanitizeUrl", "XSS_SECURITY_URL", "bypassSanitizationTrustHtml", "bypassSanitizationTrustStyle", "bypassSanitizationTrustScript", "bypassSanitizationTrustUrl", "bypassSanitizationTrustResourceUrl", "formatRuntimeError", "withDomHydration", "withHttpTransferCache", "makeStateKey", "makeStateKeyFromCore", "TransferState", "TransferStateFromCore"]
}
